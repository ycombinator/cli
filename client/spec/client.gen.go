// Package spec provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.1 DO NOT EDIT.
package spec

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
)

// Defines values for Role.
const (
	RoleMaintainer Role = "maintainer"

	RoleOwner Role = "owner"
)

// Defines values for SortOrder.
const (
	SortOrderAsc SortOrder = "asc"

	SortOrderDesc SortOrder = "desc"
)

// Defines values for WorkspacePlan.
const (
	WorkspacePlanFree WorkspacePlan = "free"
)

// APIKeyName defines model for APIKeyName.
type APIKeyName string

// Branch defines model for Branch.
type Branch struct {
	CreatedAt DateTime `json:"createdAt"`
	Name      string   `json:"name"`
}

// BranchMetadata defines model for BranchMetadata.
type BranchMetadata struct {
	Branch     *BranchName `json:"branch,omitempty"`
	Labels     *[]string   `json:"labels,omitempty"`
	Repository *string     `json:"repository,omitempty"`
	Stage      *string     `json:"stage,omitempty"`
}

// BranchMigration defines model for BranchMigration.
type BranchMigration struct {
	CreatedAt       *DateTime                        `json:"createdAt,omitempty"`
	Id              *string                          `json:"id,omitempty"`
	LastGitRevision *string                          `json:"lastGitRevision,omitempty"`
	LocalChanges    bool                             `json:"localChanges"`
	NewTableOrder   []string                         `json:"newTableOrder"`
	NewTables       *BranchMigration_NewTables       `json:"newTables,omitempty"`
	ParentID        *string                          `json:"parentID,omitempty"`
	RemovedTables   *[]string                        `json:"removedTables,omitempty"`
	RenamedTables   *[]TableRename                   `json:"renamedTables,omitempty"`
	Status          string                           `json:"status"`
	TableMigrations *BranchMigration_TableMigrations `json:"tableMigrations,omitempty"`
	Title           *string                          `json:"title,omitempty"`
}

// BranchMigration_NewTables defines model for BranchMigration.NewTables.
type BranchMigration_NewTables struct {
	AdditionalProperties map[string]Table `json:"-"`
}

// BranchMigration_TableMigrations defines model for BranchMigration.TableMigrations.
type BranchMigration_TableMigrations struct {
	AdditionalProperties map[string]TableMigration `json:"-"`
}

// BranchName defines model for BranchName.
type BranchName string

// ColumnMigration defines model for ColumnMigration.
type ColumnMigration struct {
	New Column `json:"new"`
	Old Column `json:"old"`
}

// ColumnName defines model for ColumnName.
type ColumnName string

// ColumnsFilter defines model for ColumnsFilter.
type ColumnsFilter []string

// DBBranch defines model for DBBranch.
type DBBranch struct {
	BranchName      BranchName           `json:"branchName"`
	CreatedAt       DateTime             `json:"createdAt"`
	DatabaseName    DBName               `json:"databaseName"`
	Id              string               `json:"id"`
	LastMigrationID string               `json:"lastMigrationID"`
	Metadata        *BranchMetadata      `json:"metadata,omitempty"`
	Schema          Schema               `json:"schema"`
	StartedFrom     *StartedFromMetadata `json:"startedFrom,omitempty"`
	Version         float32              `json:"version"`
}

// The DBBranchName matches the pattern `{db_name}:{branch_name}`.
type DBBranchName string

// DBName defines model for DBName.
type DBName string

// DateTime defines model for DateTime.
type DateTime time.Time

// FilterColumn defines model for FilterColumn.
type FilterColumn interface{}

// FilterColumnIncludes defines model for FilterColumnIncludes.
type FilterColumnIncludes struct {
	Includes     *FilterPredicate `json:"$includes,omitempty"`
	IncludesAll  *FilterPredicate `json:"$includesAll,omitempty"`
	IncludesAny  *FilterPredicate `json:"$includesAny,omitempty"`
	IncludesNone *FilterPredicate `json:"$includesNone,omitempty"`
}

// FilterExpression defines model for FilterExpression.
type FilterExpression struct {
	All                  *FilterList             `json:"$all,omitempty"`
	Any                  *FilterList             `json:"$any,omitempty"`
	Exists               *string                 `json:"$exists,omitempty"`
	ExistsNot            *string                 `json:"$existsNot,omitempty"`
	None                 *FilterList             `json:"$none,omitempty"`
	Not                  *FilterList             `json:"$not,omitempty"`
	AdditionalProperties map[string]FilterColumn `json:"-"`
}

// FilterList defines model for FilterList.
type FilterList interface{}

// FilterPredicate defines model for FilterPredicate.
type FilterPredicate interface{}

// FilterPredicateOp defines model for FilterPredicateOp.
type FilterPredicateOp struct {
	All        *interface{}      `json:"$all,omitempty"`
	Any        *interface{}      `json:"$any,omitempty"`
	Contains   *string           `json:"$contains,omitempty"`
	EndsWith   *string           `json:"$endsWith,omitempty"`
	Ge         *FilterRangeValue `json:"$ge,omitempty"`
	Gt         *FilterRangeValue `json:"$gt,omitempty"`
	Is         *interface{}      `json:"$is,omitempty"`
	IsNot      *interface{}      `json:"$isNot,omitempty"`
	Le         *FilterRangeValue `json:"$le,omitempty"`
	Lt         *FilterRangeValue `json:"$lt,omitempty"`
	None       *interface{}      `json:"$none,omitempty"`
	Not        *interface{}      `json:"$not,omitempty"`
	Pattern    *string           `json:"$pattern,omitempty"`
	StartsWith *string           `json:"$startsWith,omitempty"`
}

// FilterPredicateRangeOp defines model for FilterPredicateRangeOp.
type FilterPredicateRangeOp struct {
	Ge *FilterRangeValue `json:"$ge,omitempty"`
	Gt *FilterRangeValue `json:"$gt,omitempty"`
	Le *FilterRangeValue `json:"$le,omitempty"`
	Lt *FilterRangeValue `json:"$lt,omitempty"`
}

// FilterRangeValue defines model for FilterRangeValue.
type FilterRangeValue interface{}

// FilterValue defines model for FilterValue.
type FilterValue interface{}

// InviteID defines model for InviteID.
type InviteID string

// InviteKey defines model for InviteKey.
type InviteKey string

// ListBranchesResponse defines model for ListBranchesResponse.
type ListBranchesResponse struct {
	Branches     []Branch `json:"branches"`
	DatabaseName string   `json:"databaseName"`
	DisplayName  string   `json:"displayName"`
}

// ListDatabasesResponse defines model for ListDatabasesResponse.
type ListDatabasesResponse struct {
	// A list of databases in a Xata workspace
	Databases *[]struct {
		CreatedAt DateTime `json:"createdAt"`

		// The human-readable name of a database
		DisplayName string `json:"displayName"`

		// The machine-readable name of a database
		Name string `json:"name"`

		// The number of branches the database has
		NumberOfBranches int `json:"numberOfBranches"`

		// Metadata about the database for display in Xata user interfaces
		Ui *struct {
			// The user-selected color for this database across interfaces
			Color *string `json:"color,omitempty"`
		} `json:"ui,omitempty"`
	} `json:"databases,omitempty"`
}

// MetricsDatapoint defines model for MetricsDatapoint.
type MetricsDatapoint struct {
	Timestamp string `json:"timestamp"`
	Value     int    `json:"value"`
}

// MetricsLatency defines model for MetricsLatency.
type MetricsLatency struct {
	P50 *[]MetricsDatapoint `json:"p50,omitempty"`
	P90 *[]MetricsDatapoint `json:"p90,omitempty"`
}

// Pagination settings.
type PageConfig struct {
	// Query the next page that follow the cursor.
	After *string `json:"after,omitempty"`

	// Query the previous page before the cursor.
	Before *string `json:"before,omitempty"`

	// Query the first page from the cursor.
	First *string `json:"first,omitempty"`

	// Query the last page from the cursor.
	Last *string `json:"last,omitempty"`

	// Use offset to skip entries. To skip pages set offset to a multiple of size.
	Offset *int `json:"offset,omitempty"`

	// Set page size. If the size is missing it is read from the cursor. If no cursor is given xata will choose the default page size.
	Size *int `json:"size,omitempty"`
}

// Xata Table Record
type Record struct {
	Id   RecordID `json:"id"`
	Xata struct {
		// The record's table name. APIs that return records from multiple tables will set _table accordingly.
		Table *string `json:"table,omitempty"`

		// The record's version. Can be used for optimistic concurrency control.
		Version int `json:"version"`

		// Encoding/Decoding errors
		Warnings *[]string `json:"warnings,omitempty"`
	} `json:"xata"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// RecordID defines model for RecordID.
type RecordID string

// Records metadata
type RecordsMetadata struct {
	Page struct {
		// last record id
		Cursor string `json:"cursor"`

		// true if more records can be fetch
		More bool `json:"more"`
	} `json:"page"`
}

// RevLink defines model for RevLink.
type RevLink struct {
	LinkID string `json:"linkID"`
	Table  string `json:"table"`
}

// Role defines model for Role.
type Role string

// SortExpression defines model for SortExpression.
type SortExpression interface{}

// SortOrder defines model for SortOrder.
type SortOrder string

// StartedFromMetadata defines model for StartedFromMetadata.
type StartedFromMetadata struct {
	BranchName  BranchName `json:"branchName"`
	DbBranchID  string     `json:"dbBranchID"`
	MigrationID string     `json:"migrationID"`
}

// TableMigration defines model for TableMigration.
type TableMigration struct {
	ModifiedColumns *[]ColumnMigration         `json:"modifiedColumns,omitempty"`
	NewColumnOrder  []string                   `json:"newColumnOrder"`
	NewColumns      *TableMigration_NewColumns `json:"newColumns,omitempty"`
	RemovedColumns  *[]string                  `json:"removedColumns,omitempty"`
}

// TableMigration_NewColumns defines model for TableMigration.NewColumns.
type TableMigration_NewColumns struct {
	AdditionalProperties map[string]Column `json:"-"`
}

// TableName defines model for TableName.
type TableName string

// TableRename defines model for TableRename.
type TableRename struct {
	NewName string `json:"newName"`
	OldName string `json:"oldName"`
}

// User defines model for User.
type User struct {
	Email    openapi_types.Email `json:"email"`
	Fullname string              `json:"fullname"`
	Image    string              `json:"image"`
}

// UserID defines model for UserID.
type UserID string

// UserWithID defines model for UserWithID.
type UserWithID struct {
	// Embedded struct due to allOf(#/components/schemas/User)
	User `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Id UserID `json:"id"`
}

// Workspace defines model for Workspace.
type Workspace struct {
	// Embedded struct due to allOf(#/components/schemas/WorkspaceMeta)
	WorkspaceMeta `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Id          WorkspaceID   `json:"id"`
	MemberCount int           `json:"memberCount"`
	Plan        WorkspacePlan `json:"plan"`
}

// WorkspacePlan defines model for Workspace.Plan.
type WorkspacePlan string

// WorkspaceID defines model for WorkspaceID.
type WorkspaceID string

// WorkspaceInvite defines model for WorkspaceInvite.
type WorkspaceInvite struct {
	Email    openapi_types.Email `json:"email"`
	Expires  time.Time           `json:"expires"`
	InviteId InviteID            `json:"inviteId"`
	Role     Role                `json:"role"`
}

// WorkspaceMember defines model for WorkspaceMember.
type WorkspaceMember struct {
	Email    openapi_types.Email `json:"email"`
	Fullname string              `json:"fullname"`
	Role     Role                `json:"role"`
	UserId   UserID              `json:"userId"`
}

// WorkspaceMembers defines model for WorkspaceMembers.
type WorkspaceMembers struct {
	Invites []WorkspaceInvite `json:"invites"`
	Members []WorkspaceMember `json:"members"`
}

// WorkspaceMeta defines model for WorkspaceMeta.
type WorkspaceMeta struct {
	Name string `json:"name"`
	Slug string `json:"slug"`
}

// APIKeyNameParam defines model for APIKeyNameParam.
type APIKeyNameParam APIKeyName

// ColumnNameParam defines model for ColumnNameParam.
type ColumnNameParam ColumnName

// The DBBranchName matches the pattern `{db_name}:{branch_name}`.
type DBBranchNameParam DBBranchName

// DBNameParam defines model for DBNameParam.
type DBNameParam DBName

// InviteIDParam defines model for InviteIDParam.
type InviteIDParam InviteID

// InviteKeyParam defines model for InviteKeyParam.
type InviteKeyParam InviteKey

// RecordIDParam defines model for RecordIDParam.
type RecordIDParam RecordID

// TableNameParam defines model for TableNameParam.
type TableNameParam TableName

// UserIDParam defines model for UserIDParam.
type UserIDParam UserID

// WorkspaceIDParam defines model for WorkspaceIDParam.
type WorkspaceIDParam WorkspaceID

// AuthError defines model for AuthError.
type AuthError struct {
	Id      *string `json:"id,omitempty"`
	Message string  `json:"message"`
}

// BadRequestError defines model for BadRequestError.
type BadRequestError struct {
	Id      *string `json:"id,omitempty"`
	Message string  `json:"message"`
}

// BranchMigrationPlan defines model for BranchMigrationPlan.
type BranchMigrationPlan struct {
	Migration BranchMigration `json:"migration"`
	Version   int             `json:"version"`
}

// MigrationIdResponse defines model for MigrationIdResponse.
type MigrationIdResponse struct {
	MigrationID string `json:"migrationID"`
}

// QueryResponse defines model for QueryResponse.
type QueryResponse struct {
	// Records metadata
	Meta    RecordsMetadata `json:"meta"`
	Records []Record        `json:"records"`
}

// RecordUpdateResponse defines model for RecordUpdateResponse.
type RecordUpdateResponse struct {
	Id   string `json:"id"`
	Xata struct {
		Version int `json:"version"`
	} `json:"xata"`
}

// SearchResponse defines model for SearchResponse.
type SearchResponse struct {
	Records []Record `json:"records"`
}

// SimpleError defines model for SimpleError.
type SimpleError struct {
	Id      *string `json:"id,omitempty"`
	Message string  `json:"message"`
}

// CreateBranchJSONBody defines parameters for CreateBranch.
type CreateBranchJSONBody struct {
	// Select the branch to fork from. Defaults to 'main'
	From     *string         `json:"from,omitempty"`
	Metadata *BranchMetadata `json:"metadata,omitempty"`
}

// CreateBranchParams defines parameters for CreateBranch.
type CreateBranchParams struct {
	// Name of source branch to branch the new schema from
	From *string `json:"from,omitempty"`
}

// UpdateBranchMetadataJSONBody defines parameters for UpdateBranchMetadata.
type UpdateBranchMetadataJSONBody BranchMetadata

// GetBranchMigrationHistoryJSONBody defines parameters for GetBranchMigrationHistory.
type GetBranchMigrationHistoryJSONBody struct {
	Limit     *int    `json:"limit,omitempty"`
	StartFrom *string `json:"startFrom,omitempty"`
}

// ExecuteBranchMigrationPlanJSONBody defines parameters for ExecuteBranchMigrationPlan.
type ExecuteBranchMigrationPlanJSONBody struct {
	Migration BranchMigration `json:"migration"`
	Version   int             `json:"version"`
}

// GetBranchMigrationPlanJSONBody defines parameters for GetBranchMigrationPlan.
type GetBranchMigrationPlanJSONBody Schema

// SearchBranchJSONBody defines parameters for SearchBranch.
type SearchBranchJSONBody struct {
	// Maximum [Levenshtein distance](https://en.wikipedia.org/wiki/Levenshtein_distance) for the search terms. The Levenshtein
	// distance is the number of one charcter changes needed to make two strings equal. The default is 1, meaning that single
	// character typos per word are tollerated by search. You can set it to 0 to remove the typo tollerance or set it to 2
	// to allow two typos in a word.
	Fuzziness *int `json:"fuzziness,omitempty"`

	// The query string.
	Query string `json:"query"`

	// An array with the tables in which to search. By default, all tables are included.
	Tables *[]string `json:"tables,omitempty"`
}

// UpdateTableJSONBody defines parameters for UpdateTable.
type UpdateTableJSONBody struct {
	Name string `json:"name"`
}

// BulkInsertTableRecordsJSONBody defines parameters for BulkInsertTableRecords.
type BulkInsertTableRecordsJSONBody struct {
	Records []map[string]interface{} `json:"records"`
}

// AddTableColumnJSONBody defines parameters for AddTableColumn.
type AddTableColumnJSONBody Column

// UpdateColumnJSONBody defines parameters for UpdateColumn.
type UpdateColumnJSONBody struct {
	Name string `json:"name"`
}

// InsertRecordJSONBody defines parameters for InsertRecord.
type InsertRecordJSONBody map[string]interface{}

// GetRecordJSONBody defines parameters for GetRecord.
type GetRecordJSONBody struct {
	Columns *ColumnsFilter `json:"columns,omitempty"`
}

// UpdateRecordWithIDJSONBody defines parameters for UpdateRecordWithID.
type UpdateRecordWithIDJSONBody map[string]interface{}

// UpdateRecordWithIDParams defines parameters for UpdateRecordWithID.
type UpdateRecordWithIDParams struct {
	IfVersion *int `json:"ifVersion,omitempty"`
}

// UpsertRecordWithIDJSONBody defines parameters for UpsertRecordWithID.
type UpsertRecordWithIDJSONBody map[string]interface{}

// UpsertRecordWithIDParams defines parameters for UpsertRecordWithID.
type UpsertRecordWithIDParams struct {
	IfVersion *int `json:"ifVersion,omitempty"`
}

// InsertRecordWithIDJSONBody defines parameters for InsertRecordWithID.
type InsertRecordWithIDJSONBody map[string]interface{}

// InsertRecordWithIDParams defines parameters for InsertRecordWithID.
type InsertRecordWithIDParams struct {
	CreateOnly *bool `json:"createOnly,omitempty"`
	IfVersion  *int  `json:"ifVersion,omitempty"`
}

// QueryTableJSONBody defines parameters for QueryTable.
type QueryTableJSONBody struct {
	Columns *ColumnsFilter    `json:"columns,omitempty"`
	Filter  *FilterExpression `json:"filter,omitempty"`

	// Pagination settings.
	Page *PageConfig     `json:"page,omitempty"`
	Sort *SortExpression `json:"sort,omitempty"`
}

// SetTableSchemaJSONBody defines parameters for SetTableSchema.
type SetTableSchemaJSONBody struct {
	Columns []Column `json:"columns"`
}

// CreateDatabaseJSONBody defines parameters for CreateDatabase.
type CreateDatabaseJSONBody struct {
	BranchName  *string         `json:"branchName,omitempty"`
	DisplayName *string         `json:"displayName,omitempty"`
	Metadata    *BranchMetadata `json:"metadata,omitempty"`
	Ui          *struct {
		Color *string `json:"color,omitempty"`
	} `json:"ui,omitempty"`
}

// UpdateUserJSONBody defines parameters for UpdateUser.
type UpdateUserJSONBody User

// CreateWorkspaceJSONBody defines parameters for CreateWorkspace.
type CreateWorkspaceJSONBody WorkspaceMeta

// UpdateWorkspaceJSONBody defines parameters for UpdateWorkspace.
type UpdateWorkspaceJSONBody WorkspaceMeta

// InviteWorkspaceMemberJSONBody defines parameters for InviteWorkspaceMember.
type InviteWorkspaceMemberJSONBody struct {
	Email openapi_types.Email `json:"email"`
	Role  Role                `json:"role"`
}

// UpdateWorkspaceMemberRoleJSONBody defines parameters for UpdateWorkspaceMemberRole.
type UpdateWorkspaceMemberRoleJSONBody struct {
	Role Role `json:"role"`
}

// CreateBranchJSONRequestBody defines body for CreateBranch for application/json ContentType.
type CreateBranchJSONRequestBody CreateBranchJSONBody

// UpdateBranchMetadataJSONRequestBody defines body for UpdateBranchMetadata for application/json ContentType.
type UpdateBranchMetadataJSONRequestBody UpdateBranchMetadataJSONBody

// GetBranchMigrationHistoryJSONRequestBody defines body for GetBranchMigrationHistory for application/json ContentType.
type GetBranchMigrationHistoryJSONRequestBody GetBranchMigrationHistoryJSONBody

// ExecuteBranchMigrationPlanJSONRequestBody defines body for ExecuteBranchMigrationPlan for application/json ContentType.
type ExecuteBranchMigrationPlanJSONRequestBody ExecuteBranchMigrationPlanJSONBody

// GetBranchMigrationPlanJSONRequestBody defines body for GetBranchMigrationPlan for application/json ContentType.
type GetBranchMigrationPlanJSONRequestBody GetBranchMigrationPlanJSONBody

// SearchBranchJSONRequestBody defines body for SearchBranch for application/json ContentType.
type SearchBranchJSONRequestBody SearchBranchJSONBody

// UpdateTableJSONRequestBody defines body for UpdateTable for application/json ContentType.
type UpdateTableJSONRequestBody UpdateTableJSONBody

// BulkInsertTableRecordsJSONRequestBody defines body for BulkInsertTableRecords for application/json ContentType.
type BulkInsertTableRecordsJSONRequestBody BulkInsertTableRecordsJSONBody

// AddTableColumnJSONRequestBody defines body for AddTableColumn for application/json ContentType.
type AddTableColumnJSONRequestBody AddTableColumnJSONBody

// UpdateColumnJSONRequestBody defines body for UpdateColumn for application/json ContentType.
type UpdateColumnJSONRequestBody UpdateColumnJSONBody

// InsertRecordJSONRequestBody defines body for InsertRecord for application/json ContentType.
type InsertRecordJSONRequestBody InsertRecordJSONBody

// GetRecordJSONRequestBody defines body for GetRecord for application/json ContentType.
type GetRecordJSONRequestBody GetRecordJSONBody

// UpdateRecordWithIDJSONRequestBody defines body for UpdateRecordWithID for application/json ContentType.
type UpdateRecordWithIDJSONRequestBody UpdateRecordWithIDJSONBody

// UpsertRecordWithIDJSONRequestBody defines body for UpsertRecordWithID for application/json ContentType.
type UpsertRecordWithIDJSONRequestBody UpsertRecordWithIDJSONBody

// InsertRecordWithIDJSONRequestBody defines body for InsertRecordWithID for application/json ContentType.
type InsertRecordWithIDJSONRequestBody InsertRecordWithIDJSONBody

// QueryTableJSONRequestBody defines body for QueryTable for application/json ContentType.
type QueryTableJSONRequestBody QueryTableJSONBody

// SetTableSchemaJSONRequestBody defines body for SetTableSchema for application/json ContentType.
type SetTableSchemaJSONRequestBody SetTableSchemaJSONBody

// CreateDatabaseJSONRequestBody defines body for CreateDatabase for application/json ContentType.
type CreateDatabaseJSONRequestBody CreateDatabaseJSONBody

// UpdateUserJSONRequestBody defines body for UpdateUser for application/json ContentType.
type UpdateUserJSONRequestBody UpdateUserJSONBody

// CreateWorkspaceJSONRequestBody defines body for CreateWorkspace for application/json ContentType.
type CreateWorkspaceJSONRequestBody CreateWorkspaceJSONBody

// UpdateWorkspaceJSONRequestBody defines body for UpdateWorkspace for application/json ContentType.
type UpdateWorkspaceJSONRequestBody UpdateWorkspaceJSONBody

// InviteWorkspaceMemberJSONRequestBody defines body for InviteWorkspaceMember for application/json ContentType.
type InviteWorkspaceMemberJSONRequestBody InviteWorkspaceMemberJSONBody

// UpdateWorkspaceMemberRoleJSONRequestBody defines body for UpdateWorkspaceMemberRole for application/json ContentType.
type UpdateWorkspaceMemberRoleJSONRequestBody UpdateWorkspaceMemberRoleJSONBody

// Getter for additional properties for BranchMigration_NewTables. Returns the specified
// element and whether it was found
func (a BranchMigration_NewTables) Get(fieldName string) (value Table, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for BranchMigration_NewTables
func (a *BranchMigration_NewTables) Set(fieldName string, value Table) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]Table)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for BranchMigration_NewTables to handle AdditionalProperties
func (a *BranchMigration_NewTables) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]Table)
		for fieldName, fieldBuf := range object {
			var fieldVal Table
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for BranchMigration_NewTables to handle AdditionalProperties
func (a BranchMigration_NewTables) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for BranchMigration_TableMigrations. Returns the specified
// element and whether it was found
func (a BranchMigration_TableMigrations) Get(fieldName string) (value TableMigration, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for BranchMigration_TableMigrations
func (a *BranchMigration_TableMigrations) Set(fieldName string, value TableMigration) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]TableMigration)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for BranchMigration_TableMigrations to handle AdditionalProperties
func (a *BranchMigration_TableMigrations) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]TableMigration)
		for fieldName, fieldBuf := range object {
			var fieldVal TableMigration
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for BranchMigration_TableMigrations to handle AdditionalProperties
func (a BranchMigration_TableMigrations) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for FilterExpression. Returns the specified
// element and whether it was found
func (a FilterExpression) Get(fieldName string) (value FilterColumn, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for FilterExpression
func (a *FilterExpression) Set(fieldName string, value FilterColumn) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]FilterColumn)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for FilterExpression to handle AdditionalProperties
func (a *FilterExpression) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["$all"]; found {
		err = json.Unmarshal(raw, &a.All)
		if err != nil {
			return fmt.Errorf("error reading '$all': %w", err)
		}
		delete(object, "$all")
	}

	if raw, found := object["$any"]; found {
		err = json.Unmarshal(raw, &a.Any)
		if err != nil {
			return fmt.Errorf("error reading '$any': %w", err)
		}
		delete(object, "$any")
	}

	if raw, found := object["$exists"]; found {
		err = json.Unmarshal(raw, &a.Exists)
		if err != nil {
			return fmt.Errorf("error reading '$exists': %w", err)
		}
		delete(object, "$exists")
	}

	if raw, found := object["$existsNot"]; found {
		err = json.Unmarshal(raw, &a.ExistsNot)
		if err != nil {
			return fmt.Errorf("error reading '$existsNot': %w", err)
		}
		delete(object, "$existsNot")
	}

	if raw, found := object["$none"]; found {
		err = json.Unmarshal(raw, &a.None)
		if err != nil {
			return fmt.Errorf("error reading '$none': %w", err)
		}
		delete(object, "$none")
	}

	if raw, found := object["$not"]; found {
		err = json.Unmarshal(raw, &a.Not)
		if err != nil {
			return fmt.Errorf("error reading '$not': %w", err)
		}
		delete(object, "$not")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]FilterColumn)
		for fieldName, fieldBuf := range object {
			var fieldVal FilterColumn
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for FilterExpression to handle AdditionalProperties
func (a FilterExpression) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.All != nil {
		object["$all"], err = json.Marshal(a.All)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '$all': %w", err)
		}
	}

	if a.Any != nil {
		object["$any"], err = json.Marshal(a.Any)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '$any': %w", err)
		}
	}

	if a.Exists != nil {
		object["$exists"], err = json.Marshal(a.Exists)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '$exists': %w", err)
		}
	}

	if a.ExistsNot != nil {
		object["$existsNot"], err = json.Marshal(a.ExistsNot)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '$existsNot': %w", err)
		}
	}

	if a.None != nil {
		object["$none"], err = json.Marshal(a.None)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '$none': %w", err)
		}
	}

	if a.Not != nil {
		object["$not"], err = json.Marshal(a.Not)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '$not': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for Record. Returns the specified
// element and whether it was found
func (a Record) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for Record
func (a *Record) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for Record to handle AdditionalProperties
func (a *Record) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["id"]; found {
		err = json.Unmarshal(raw, &a.Id)
		if err != nil {
			return fmt.Errorf("error reading 'id': %w", err)
		}
		delete(object, "id")
	}

	if raw, found := object["xata"]; found {
		err = json.Unmarshal(raw, &a.Xata)
		if err != nil {
			return fmt.Errorf("error reading 'xata': %w", err)
		}
		delete(object, "xata")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for Record to handle AdditionalProperties
func (a Record) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["id"], err = json.Marshal(a.Id)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'id': %w", err)
	}

	object["xata"], err = json.Marshal(a.Xata)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'xata': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for TableMigration_NewColumns. Returns the specified
// element and whether it was found
func (a TableMigration_NewColumns) Get(fieldName string) (value Column, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for TableMigration_NewColumns
func (a *TableMigration_NewColumns) Set(fieldName string, value Column) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]Column)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for TableMigration_NewColumns to handle AdditionalProperties
func (a *TableMigration_NewColumns) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]Column)
		for fieldName, fieldBuf := range object {
			var fieldVal Column
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for TableMigration_NewColumns to handle AdditionalProperties
func (a TableMigration_NewColumns) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// DeleteBranch request
	DeleteBranch(ctx context.Context, dbBranchName DBBranchNameParam, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetBranchDetails request
	GetBranchDetails(ctx context.Context, dbBranchName DBBranchNameParam, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateBranch request with any body
	CreateBranchWithBody(ctx context.Context, dbBranchName DBBranchNameParam, params *CreateBranchParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateBranch(ctx context.Context, dbBranchName DBBranchNameParam, params *CreateBranchParams, body CreateBranchJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetBranchMetadata request
	GetBranchMetadata(ctx context.Context, dbBranchName DBBranchNameParam, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateBranchMetadata request with any body
	UpdateBranchMetadataWithBody(ctx context.Context, dbBranchName DBBranchNameParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateBranchMetadata(ctx context.Context, dbBranchName DBBranchNameParam, body UpdateBranchMetadataJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetBranchMigrationHistory request with any body
	GetBranchMigrationHistoryWithBody(ctx context.Context, dbBranchName DBBranchNameParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetBranchMigrationHistory(ctx context.Context, dbBranchName DBBranchNameParam, body GetBranchMigrationHistoryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ExecuteBranchMigrationPlan request with any body
	ExecuteBranchMigrationPlanWithBody(ctx context.Context, dbBranchName DBBranchNameParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ExecuteBranchMigrationPlan(ctx context.Context, dbBranchName DBBranchNameParam, body ExecuteBranchMigrationPlanJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetBranchMigrationPlan request with any body
	GetBranchMigrationPlanWithBody(ctx context.Context, dbBranchName DBBranchNameParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetBranchMigrationPlan(ctx context.Context, dbBranchName DBBranchNameParam, body GetBranchMigrationPlanJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SearchBranch request with any body
	SearchBranchWithBody(ctx context.Context, dbBranchName DBBranchNameParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SearchBranch(ctx context.Context, dbBranchName DBBranchNameParam, body SearchBranchJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetBranchStats request
	GetBranchStats(ctx context.Context, dbBranchName DBBranchNameParam, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteTable request
	DeleteTable(ctx context.Context, dbBranchName DBBranchNameParam, tableName TableNameParam, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateTable request with any body
	UpdateTableWithBody(ctx context.Context, dbBranchName DBBranchNameParam, tableName TableNameParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateTable(ctx context.Context, dbBranchName DBBranchNameParam, tableName TableNameParam, body UpdateTableJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateTable request
	CreateTable(ctx context.Context, dbBranchName DBBranchNameParam, tableName TableNameParam, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BulkInsertTableRecords request with any body
	BulkInsertTableRecordsWithBody(ctx context.Context, dbBranchName DBBranchNameParam, tableName TableNameParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	BulkInsertTableRecords(ctx context.Context, dbBranchName DBBranchNameParam, tableName TableNameParam, body BulkInsertTableRecordsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTableColumns request
	GetTableColumns(ctx context.Context, dbBranchName DBBranchNameParam, tableName TableNameParam, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AddTableColumn request with any body
	AddTableColumnWithBody(ctx context.Context, dbBranchName DBBranchNameParam, tableName TableNameParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AddTableColumn(ctx context.Context, dbBranchName DBBranchNameParam, tableName TableNameParam, body AddTableColumnJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteColumn request
	DeleteColumn(ctx context.Context, dbBranchName DBBranchNameParam, tableName TableNameParam, columnName ColumnNameParam, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetColumn request
	GetColumn(ctx context.Context, dbBranchName DBBranchNameParam, tableName TableNameParam, columnName ColumnNameParam, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateColumn request with any body
	UpdateColumnWithBody(ctx context.Context, dbBranchName DBBranchNameParam, tableName TableNameParam, columnName ColumnNameParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateColumn(ctx context.Context, dbBranchName DBBranchNameParam, tableName TableNameParam, columnName ColumnNameParam, body UpdateColumnJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InsertRecord request with any body
	InsertRecordWithBody(ctx context.Context, dbBranchName DBBranchNameParam, tableName TableNameParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	InsertRecord(ctx context.Context, dbBranchName DBBranchNameParam, tableName TableNameParam, body InsertRecordJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteRecord request
	DeleteRecord(ctx context.Context, dbBranchName DBBranchNameParam, tableName TableNameParam, recordId RecordIDParam, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRecord request with any body
	GetRecordWithBody(ctx context.Context, dbBranchName DBBranchNameParam, tableName TableNameParam, recordId RecordIDParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetRecord(ctx context.Context, dbBranchName DBBranchNameParam, tableName TableNameParam, recordId RecordIDParam, body GetRecordJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateRecordWithID request with any body
	UpdateRecordWithIDWithBody(ctx context.Context, dbBranchName DBBranchNameParam, tableName TableNameParam, recordId RecordIDParam, params *UpdateRecordWithIDParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateRecordWithID(ctx context.Context, dbBranchName DBBranchNameParam, tableName TableNameParam, recordId RecordIDParam, params *UpdateRecordWithIDParams, body UpdateRecordWithIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpsertRecordWithID request with any body
	UpsertRecordWithIDWithBody(ctx context.Context, dbBranchName DBBranchNameParam, tableName TableNameParam, recordId RecordIDParam, params *UpsertRecordWithIDParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpsertRecordWithID(ctx context.Context, dbBranchName DBBranchNameParam, tableName TableNameParam, recordId RecordIDParam, params *UpsertRecordWithIDParams, body UpsertRecordWithIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InsertRecordWithID request with any body
	InsertRecordWithIDWithBody(ctx context.Context, dbBranchName DBBranchNameParam, tableName TableNameParam, recordId RecordIDParam, params *InsertRecordWithIDParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	InsertRecordWithID(ctx context.Context, dbBranchName DBBranchNameParam, tableName TableNameParam, recordId RecordIDParam, params *InsertRecordWithIDParams, body InsertRecordWithIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// QueryTable request with any body
	QueryTableWithBody(ctx context.Context, dbBranchName DBBranchNameParam, tableName TableNameParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	QueryTable(ctx context.Context, dbBranchName DBBranchNameParam, tableName TableNameParam, body QueryTableJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTableSchema request
	GetTableSchema(ctx context.Context, dbBranchName DBBranchNameParam, tableName TableNameParam, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SetTableSchema request with any body
	SetTableSchemaWithBody(ctx context.Context, dbBranchName DBBranchNameParam, tableName TableNameParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SetTableSchema(ctx context.Context, dbBranchName DBBranchNameParam, tableName TableNameParam, body SetTableSchemaJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDatabaseList request
	GetDatabaseList(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteDatabase request
	DeleteDatabase(ctx context.Context, dbName DBNameParam, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetBranchList request
	GetBranchList(ctx context.Context, dbName DBNameParam, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateDatabase request with any body
	CreateDatabaseWithBody(ctx context.Context, dbName DBNameParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateDatabase(ctx context.Context, dbName DBNameParam, body CreateDatabaseJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteUser request
	DeleteUser(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUser request
	GetUser(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateUser request with any body
	UpdateUserWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateUser(ctx context.Context, body UpdateUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserAPIKeys request
	GetUserAPIKeys(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteUserAPIKey request
	DeleteUserAPIKey(ctx context.Context, keyName APIKeyNameParam, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateUserAPIKey request
	CreateUserAPIKey(ctx context.Context, keyName APIKeyNameParam, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetWorkspacesList request
	GetWorkspacesList(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateWorkspace request with any body
	CreateWorkspaceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateWorkspace(ctx context.Context, body CreateWorkspaceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteWorkspace request
	DeleteWorkspace(ctx context.Context, workspaceId WorkspaceIDParam, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetWorkspace request
	GetWorkspace(ctx context.Context, workspaceId WorkspaceIDParam, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateWorkspace request with any body
	UpdateWorkspaceWithBody(ctx context.Context, workspaceId WorkspaceIDParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateWorkspace(ctx context.Context, workspaceId WorkspaceIDParam, body UpdateWorkspaceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InviteWorkspaceMember request with any body
	InviteWorkspaceMemberWithBody(ctx context.Context, workspaceId WorkspaceIDParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	InviteWorkspaceMember(ctx context.Context, workspaceId WorkspaceIDParam, body InviteWorkspaceMemberJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CancelWorkspaceMemberInvite request
	CancelWorkspaceMemberInvite(ctx context.Context, workspaceId WorkspaceIDParam, inviteId InviteIDParam, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ResendWorkspaceMemberInvite request
	ResendWorkspaceMemberInvite(ctx context.Context, workspaceId WorkspaceIDParam, inviteId InviteIDParam, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AcceptWorkspaceMemberInvite request
	AcceptWorkspaceMemberInvite(ctx context.Context, workspaceId WorkspaceIDParam, inviteKey InviteKeyParam, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetWorkspaceMembersList request
	GetWorkspaceMembersList(ctx context.Context, workspaceId WorkspaceIDParam, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RemoveWorkspaceMember request
	RemoveWorkspaceMember(ctx context.Context, workspaceId WorkspaceIDParam, userId UserIDParam, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateWorkspaceMemberRole request with any body
	UpdateWorkspaceMemberRoleWithBody(ctx context.Context, workspaceId WorkspaceIDParam, userId UserIDParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateWorkspaceMemberRole(ctx context.Context, workspaceId WorkspaceIDParam, userId UserIDParam, body UpdateWorkspaceMemberRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) DeleteBranch(ctx context.Context, dbBranchName DBBranchNameParam, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteBranchRequest(c.Server, dbBranchName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetBranchDetails(ctx context.Context, dbBranchName DBBranchNameParam, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetBranchDetailsRequest(c.Server, dbBranchName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateBranchWithBody(ctx context.Context, dbBranchName DBBranchNameParam, params *CreateBranchParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateBranchRequestWithBody(c.Server, dbBranchName, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateBranch(ctx context.Context, dbBranchName DBBranchNameParam, params *CreateBranchParams, body CreateBranchJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateBranchRequest(c.Server, dbBranchName, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetBranchMetadata(ctx context.Context, dbBranchName DBBranchNameParam, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetBranchMetadataRequest(c.Server, dbBranchName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateBranchMetadataWithBody(ctx context.Context, dbBranchName DBBranchNameParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateBranchMetadataRequestWithBody(c.Server, dbBranchName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateBranchMetadata(ctx context.Context, dbBranchName DBBranchNameParam, body UpdateBranchMetadataJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateBranchMetadataRequest(c.Server, dbBranchName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetBranchMigrationHistoryWithBody(ctx context.Context, dbBranchName DBBranchNameParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetBranchMigrationHistoryRequestWithBody(c.Server, dbBranchName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetBranchMigrationHistory(ctx context.Context, dbBranchName DBBranchNameParam, body GetBranchMigrationHistoryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetBranchMigrationHistoryRequest(c.Server, dbBranchName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExecuteBranchMigrationPlanWithBody(ctx context.Context, dbBranchName DBBranchNameParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExecuteBranchMigrationPlanRequestWithBody(c.Server, dbBranchName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExecuteBranchMigrationPlan(ctx context.Context, dbBranchName DBBranchNameParam, body ExecuteBranchMigrationPlanJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExecuteBranchMigrationPlanRequest(c.Server, dbBranchName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetBranchMigrationPlanWithBody(ctx context.Context, dbBranchName DBBranchNameParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetBranchMigrationPlanRequestWithBody(c.Server, dbBranchName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetBranchMigrationPlan(ctx context.Context, dbBranchName DBBranchNameParam, body GetBranchMigrationPlanJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetBranchMigrationPlanRequest(c.Server, dbBranchName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SearchBranchWithBody(ctx context.Context, dbBranchName DBBranchNameParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSearchBranchRequestWithBody(c.Server, dbBranchName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SearchBranch(ctx context.Context, dbBranchName DBBranchNameParam, body SearchBranchJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSearchBranchRequest(c.Server, dbBranchName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetBranchStats(ctx context.Context, dbBranchName DBBranchNameParam, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetBranchStatsRequest(c.Server, dbBranchName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteTable(ctx context.Context, dbBranchName DBBranchNameParam, tableName TableNameParam, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteTableRequest(c.Server, dbBranchName, tableName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateTableWithBody(ctx context.Context, dbBranchName DBBranchNameParam, tableName TableNameParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateTableRequestWithBody(c.Server, dbBranchName, tableName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateTable(ctx context.Context, dbBranchName DBBranchNameParam, tableName TableNameParam, body UpdateTableJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateTableRequest(c.Server, dbBranchName, tableName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateTable(ctx context.Context, dbBranchName DBBranchNameParam, tableName TableNameParam, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateTableRequest(c.Server, dbBranchName, tableName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BulkInsertTableRecordsWithBody(ctx context.Context, dbBranchName DBBranchNameParam, tableName TableNameParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBulkInsertTableRecordsRequestWithBody(c.Server, dbBranchName, tableName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BulkInsertTableRecords(ctx context.Context, dbBranchName DBBranchNameParam, tableName TableNameParam, body BulkInsertTableRecordsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBulkInsertTableRecordsRequest(c.Server, dbBranchName, tableName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTableColumns(ctx context.Context, dbBranchName DBBranchNameParam, tableName TableNameParam, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTableColumnsRequest(c.Server, dbBranchName, tableName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddTableColumnWithBody(ctx context.Context, dbBranchName DBBranchNameParam, tableName TableNameParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddTableColumnRequestWithBody(c.Server, dbBranchName, tableName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddTableColumn(ctx context.Context, dbBranchName DBBranchNameParam, tableName TableNameParam, body AddTableColumnJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddTableColumnRequest(c.Server, dbBranchName, tableName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteColumn(ctx context.Context, dbBranchName DBBranchNameParam, tableName TableNameParam, columnName ColumnNameParam, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteColumnRequest(c.Server, dbBranchName, tableName, columnName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetColumn(ctx context.Context, dbBranchName DBBranchNameParam, tableName TableNameParam, columnName ColumnNameParam, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetColumnRequest(c.Server, dbBranchName, tableName, columnName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateColumnWithBody(ctx context.Context, dbBranchName DBBranchNameParam, tableName TableNameParam, columnName ColumnNameParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateColumnRequestWithBody(c.Server, dbBranchName, tableName, columnName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateColumn(ctx context.Context, dbBranchName DBBranchNameParam, tableName TableNameParam, columnName ColumnNameParam, body UpdateColumnJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateColumnRequest(c.Server, dbBranchName, tableName, columnName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InsertRecordWithBody(ctx context.Context, dbBranchName DBBranchNameParam, tableName TableNameParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInsertRecordRequestWithBody(c.Server, dbBranchName, tableName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InsertRecord(ctx context.Context, dbBranchName DBBranchNameParam, tableName TableNameParam, body InsertRecordJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInsertRecordRequest(c.Server, dbBranchName, tableName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteRecord(ctx context.Context, dbBranchName DBBranchNameParam, tableName TableNameParam, recordId RecordIDParam, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteRecordRequest(c.Server, dbBranchName, tableName, recordId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRecordWithBody(ctx context.Context, dbBranchName DBBranchNameParam, tableName TableNameParam, recordId RecordIDParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRecordRequestWithBody(c.Server, dbBranchName, tableName, recordId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRecord(ctx context.Context, dbBranchName DBBranchNameParam, tableName TableNameParam, recordId RecordIDParam, body GetRecordJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRecordRequest(c.Server, dbBranchName, tableName, recordId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateRecordWithIDWithBody(ctx context.Context, dbBranchName DBBranchNameParam, tableName TableNameParam, recordId RecordIDParam, params *UpdateRecordWithIDParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateRecordWithIDRequestWithBody(c.Server, dbBranchName, tableName, recordId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateRecordWithID(ctx context.Context, dbBranchName DBBranchNameParam, tableName TableNameParam, recordId RecordIDParam, params *UpdateRecordWithIDParams, body UpdateRecordWithIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateRecordWithIDRequest(c.Server, dbBranchName, tableName, recordId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpsertRecordWithIDWithBody(ctx context.Context, dbBranchName DBBranchNameParam, tableName TableNameParam, recordId RecordIDParam, params *UpsertRecordWithIDParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpsertRecordWithIDRequestWithBody(c.Server, dbBranchName, tableName, recordId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpsertRecordWithID(ctx context.Context, dbBranchName DBBranchNameParam, tableName TableNameParam, recordId RecordIDParam, params *UpsertRecordWithIDParams, body UpsertRecordWithIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpsertRecordWithIDRequest(c.Server, dbBranchName, tableName, recordId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InsertRecordWithIDWithBody(ctx context.Context, dbBranchName DBBranchNameParam, tableName TableNameParam, recordId RecordIDParam, params *InsertRecordWithIDParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInsertRecordWithIDRequestWithBody(c.Server, dbBranchName, tableName, recordId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InsertRecordWithID(ctx context.Context, dbBranchName DBBranchNameParam, tableName TableNameParam, recordId RecordIDParam, params *InsertRecordWithIDParams, body InsertRecordWithIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInsertRecordWithIDRequest(c.Server, dbBranchName, tableName, recordId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) QueryTableWithBody(ctx context.Context, dbBranchName DBBranchNameParam, tableName TableNameParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewQueryTableRequestWithBody(c.Server, dbBranchName, tableName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) QueryTable(ctx context.Context, dbBranchName DBBranchNameParam, tableName TableNameParam, body QueryTableJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewQueryTableRequest(c.Server, dbBranchName, tableName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTableSchema(ctx context.Context, dbBranchName DBBranchNameParam, tableName TableNameParam, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTableSchemaRequest(c.Server, dbBranchName, tableName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SetTableSchemaWithBody(ctx context.Context, dbBranchName DBBranchNameParam, tableName TableNameParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSetTableSchemaRequestWithBody(c.Server, dbBranchName, tableName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SetTableSchema(ctx context.Context, dbBranchName DBBranchNameParam, tableName TableNameParam, body SetTableSchemaJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSetTableSchemaRequest(c.Server, dbBranchName, tableName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDatabaseList(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDatabaseListRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteDatabase(ctx context.Context, dbName DBNameParam, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteDatabaseRequest(c.Server, dbName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetBranchList(ctx context.Context, dbName DBNameParam, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetBranchListRequest(c.Server, dbName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateDatabaseWithBody(ctx context.Context, dbName DBNameParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateDatabaseRequestWithBody(c.Server, dbName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateDatabase(ctx context.Context, dbName DBNameParam, body CreateDatabaseJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateDatabaseRequest(c.Server, dbName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteUser(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteUserRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUser(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateUserWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateUserRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateUser(ctx context.Context, body UpdateUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateUserRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserAPIKeys(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserAPIKeysRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteUserAPIKey(ctx context.Context, keyName APIKeyNameParam, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteUserAPIKeyRequest(c.Server, keyName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateUserAPIKey(ctx context.Context, keyName APIKeyNameParam, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateUserAPIKeyRequest(c.Server, keyName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetWorkspacesList(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetWorkspacesListRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateWorkspaceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateWorkspaceRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateWorkspace(ctx context.Context, body CreateWorkspaceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateWorkspaceRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteWorkspace(ctx context.Context, workspaceId WorkspaceIDParam, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteWorkspaceRequest(c.Server, workspaceId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetWorkspace(ctx context.Context, workspaceId WorkspaceIDParam, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetWorkspaceRequest(c.Server, workspaceId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateWorkspaceWithBody(ctx context.Context, workspaceId WorkspaceIDParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateWorkspaceRequestWithBody(c.Server, workspaceId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateWorkspace(ctx context.Context, workspaceId WorkspaceIDParam, body UpdateWorkspaceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateWorkspaceRequest(c.Server, workspaceId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InviteWorkspaceMemberWithBody(ctx context.Context, workspaceId WorkspaceIDParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInviteWorkspaceMemberRequestWithBody(c.Server, workspaceId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InviteWorkspaceMember(ctx context.Context, workspaceId WorkspaceIDParam, body InviteWorkspaceMemberJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInviteWorkspaceMemberRequest(c.Server, workspaceId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CancelWorkspaceMemberInvite(ctx context.Context, workspaceId WorkspaceIDParam, inviteId InviteIDParam, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCancelWorkspaceMemberInviteRequest(c.Server, workspaceId, inviteId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ResendWorkspaceMemberInvite(ctx context.Context, workspaceId WorkspaceIDParam, inviteId InviteIDParam, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewResendWorkspaceMemberInviteRequest(c.Server, workspaceId, inviteId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AcceptWorkspaceMemberInvite(ctx context.Context, workspaceId WorkspaceIDParam, inviteKey InviteKeyParam, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAcceptWorkspaceMemberInviteRequest(c.Server, workspaceId, inviteKey)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetWorkspaceMembersList(ctx context.Context, workspaceId WorkspaceIDParam, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetWorkspaceMembersListRequest(c.Server, workspaceId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RemoveWorkspaceMember(ctx context.Context, workspaceId WorkspaceIDParam, userId UserIDParam, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRemoveWorkspaceMemberRequest(c.Server, workspaceId, userId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateWorkspaceMemberRoleWithBody(ctx context.Context, workspaceId WorkspaceIDParam, userId UserIDParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateWorkspaceMemberRoleRequestWithBody(c.Server, workspaceId, userId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateWorkspaceMemberRole(ctx context.Context, workspaceId WorkspaceIDParam, userId UserIDParam, body UpdateWorkspaceMemberRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateWorkspaceMemberRoleRequest(c.Server, workspaceId, userId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewDeleteBranchRequest generates requests for DeleteBranch
func NewDeleteBranchRequest(server string, dbBranchName DBBranchNameParam) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "db_branch_name", runtime.ParamLocationPath, dbBranchName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/db/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetBranchDetailsRequest generates requests for GetBranchDetails
func NewGetBranchDetailsRequest(server string, dbBranchName DBBranchNameParam) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "db_branch_name", runtime.ParamLocationPath, dbBranchName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/db/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateBranchRequest calls the generic CreateBranch builder with application/json body
func NewCreateBranchRequest(server string, dbBranchName DBBranchNameParam, params *CreateBranchParams, body CreateBranchJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateBranchRequestWithBody(server, dbBranchName, params, "application/json", bodyReader)
}

// NewCreateBranchRequestWithBody generates requests for CreateBranch with any type of body
func NewCreateBranchRequestWithBody(server string, dbBranchName DBBranchNameParam, params *CreateBranchParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "db_branch_name", runtime.ParamLocationPath, dbBranchName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/db/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.From != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "from", runtime.ParamLocationQuery, *params.From); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetBranchMetadataRequest generates requests for GetBranchMetadata
func NewGetBranchMetadataRequest(server string, dbBranchName DBBranchNameParam) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "db_branch_name", runtime.ParamLocationPath, dbBranchName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/db/%s/metadata", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateBranchMetadataRequest calls the generic UpdateBranchMetadata builder with application/json body
func NewUpdateBranchMetadataRequest(server string, dbBranchName DBBranchNameParam, body UpdateBranchMetadataJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateBranchMetadataRequestWithBody(server, dbBranchName, "application/json", bodyReader)
}

// NewUpdateBranchMetadataRequestWithBody generates requests for UpdateBranchMetadata with any type of body
func NewUpdateBranchMetadataRequestWithBody(server string, dbBranchName DBBranchNameParam, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "db_branch_name", runtime.ParamLocationPath, dbBranchName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/db/%s/metadata", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetBranchMigrationHistoryRequest calls the generic GetBranchMigrationHistory builder with application/json body
func NewGetBranchMigrationHistoryRequest(server string, dbBranchName DBBranchNameParam, body GetBranchMigrationHistoryJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetBranchMigrationHistoryRequestWithBody(server, dbBranchName, "application/json", bodyReader)
}

// NewGetBranchMigrationHistoryRequestWithBody generates requests for GetBranchMigrationHistory with any type of body
func NewGetBranchMigrationHistoryRequestWithBody(server string, dbBranchName DBBranchNameParam, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "db_branch_name", runtime.ParamLocationPath, dbBranchName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/db/%s/migrations", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewExecuteBranchMigrationPlanRequest calls the generic ExecuteBranchMigrationPlan builder with application/json body
func NewExecuteBranchMigrationPlanRequest(server string, dbBranchName DBBranchNameParam, body ExecuteBranchMigrationPlanJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewExecuteBranchMigrationPlanRequestWithBody(server, dbBranchName, "application/json", bodyReader)
}

// NewExecuteBranchMigrationPlanRequestWithBody generates requests for ExecuteBranchMigrationPlan with any type of body
func NewExecuteBranchMigrationPlanRequestWithBody(server string, dbBranchName DBBranchNameParam, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "db_branch_name", runtime.ParamLocationPath, dbBranchName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/db/%s/migrations/execute", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetBranchMigrationPlanRequest calls the generic GetBranchMigrationPlan builder with application/json body
func NewGetBranchMigrationPlanRequest(server string, dbBranchName DBBranchNameParam, body GetBranchMigrationPlanJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetBranchMigrationPlanRequestWithBody(server, dbBranchName, "application/json", bodyReader)
}

// NewGetBranchMigrationPlanRequestWithBody generates requests for GetBranchMigrationPlan with any type of body
func NewGetBranchMigrationPlanRequestWithBody(server string, dbBranchName DBBranchNameParam, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "db_branch_name", runtime.ParamLocationPath, dbBranchName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/db/%s/migrations/plan", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewSearchBranchRequest calls the generic SearchBranch builder with application/json body
func NewSearchBranchRequest(server string, dbBranchName DBBranchNameParam, body SearchBranchJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSearchBranchRequestWithBody(server, dbBranchName, "application/json", bodyReader)
}

// NewSearchBranchRequestWithBody generates requests for SearchBranch with any type of body
func NewSearchBranchRequestWithBody(server string, dbBranchName DBBranchNameParam, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "db_branch_name", runtime.ParamLocationPath, dbBranchName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/db/%s/search", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetBranchStatsRequest generates requests for GetBranchStats
func NewGetBranchStatsRequest(server string, dbBranchName DBBranchNameParam) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "db_branch_name", runtime.ParamLocationPath, dbBranchName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/db/%s/stats", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteTableRequest generates requests for DeleteTable
func NewDeleteTableRequest(server string, dbBranchName DBBranchNameParam, tableName TableNameParam) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "db_branch_name", runtime.ParamLocationPath, dbBranchName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "table_name", runtime.ParamLocationPath, tableName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/db/%s/tables/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateTableRequest calls the generic UpdateTable builder with application/json body
func NewUpdateTableRequest(server string, dbBranchName DBBranchNameParam, tableName TableNameParam, body UpdateTableJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateTableRequestWithBody(server, dbBranchName, tableName, "application/json", bodyReader)
}

// NewUpdateTableRequestWithBody generates requests for UpdateTable with any type of body
func NewUpdateTableRequestWithBody(server string, dbBranchName DBBranchNameParam, tableName TableNameParam, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "db_branch_name", runtime.ParamLocationPath, dbBranchName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "table_name", runtime.ParamLocationPath, tableName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/db/%s/tables/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateTableRequest generates requests for CreateTable
func NewCreateTableRequest(server string, dbBranchName DBBranchNameParam, tableName TableNameParam) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "db_branch_name", runtime.ParamLocationPath, dbBranchName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "table_name", runtime.ParamLocationPath, tableName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/db/%s/tables/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBulkInsertTableRecordsRequest calls the generic BulkInsertTableRecords builder with application/json body
func NewBulkInsertTableRecordsRequest(server string, dbBranchName DBBranchNameParam, tableName TableNameParam, body BulkInsertTableRecordsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewBulkInsertTableRecordsRequestWithBody(server, dbBranchName, tableName, "application/json", bodyReader)
}

// NewBulkInsertTableRecordsRequestWithBody generates requests for BulkInsertTableRecords with any type of body
func NewBulkInsertTableRecordsRequestWithBody(server string, dbBranchName DBBranchNameParam, tableName TableNameParam, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "db_branch_name", runtime.ParamLocationPath, dbBranchName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "table_name", runtime.ParamLocationPath, tableName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/db/%s/tables/%s/bulk", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetTableColumnsRequest generates requests for GetTableColumns
func NewGetTableColumnsRequest(server string, dbBranchName DBBranchNameParam, tableName TableNameParam) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "db_branch_name", runtime.ParamLocationPath, dbBranchName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "table_name", runtime.ParamLocationPath, tableName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/db/%s/tables/%s/columns", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAddTableColumnRequest calls the generic AddTableColumn builder with application/json body
func NewAddTableColumnRequest(server string, dbBranchName DBBranchNameParam, tableName TableNameParam, body AddTableColumnJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAddTableColumnRequestWithBody(server, dbBranchName, tableName, "application/json", bodyReader)
}

// NewAddTableColumnRequestWithBody generates requests for AddTableColumn with any type of body
func NewAddTableColumnRequestWithBody(server string, dbBranchName DBBranchNameParam, tableName TableNameParam, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "db_branch_name", runtime.ParamLocationPath, dbBranchName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "table_name", runtime.ParamLocationPath, tableName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/db/%s/tables/%s/columns", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteColumnRequest generates requests for DeleteColumn
func NewDeleteColumnRequest(server string, dbBranchName DBBranchNameParam, tableName TableNameParam, columnName ColumnNameParam) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "db_branch_name", runtime.ParamLocationPath, dbBranchName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "table_name", runtime.ParamLocationPath, tableName)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "column_name", runtime.ParamLocationPath, columnName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/db/%s/tables/%s/columns/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetColumnRequest generates requests for GetColumn
func NewGetColumnRequest(server string, dbBranchName DBBranchNameParam, tableName TableNameParam, columnName ColumnNameParam) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "db_branch_name", runtime.ParamLocationPath, dbBranchName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "table_name", runtime.ParamLocationPath, tableName)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "column_name", runtime.ParamLocationPath, columnName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/db/%s/tables/%s/columns/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateColumnRequest calls the generic UpdateColumn builder with application/json body
func NewUpdateColumnRequest(server string, dbBranchName DBBranchNameParam, tableName TableNameParam, columnName ColumnNameParam, body UpdateColumnJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateColumnRequestWithBody(server, dbBranchName, tableName, columnName, "application/json", bodyReader)
}

// NewUpdateColumnRequestWithBody generates requests for UpdateColumn with any type of body
func NewUpdateColumnRequestWithBody(server string, dbBranchName DBBranchNameParam, tableName TableNameParam, columnName ColumnNameParam, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "db_branch_name", runtime.ParamLocationPath, dbBranchName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "table_name", runtime.ParamLocationPath, tableName)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "column_name", runtime.ParamLocationPath, columnName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/db/%s/tables/%s/columns/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewInsertRecordRequest calls the generic InsertRecord builder with application/json body
func NewInsertRecordRequest(server string, dbBranchName DBBranchNameParam, tableName TableNameParam, body InsertRecordJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewInsertRecordRequestWithBody(server, dbBranchName, tableName, "application/json", bodyReader)
}

// NewInsertRecordRequestWithBody generates requests for InsertRecord with any type of body
func NewInsertRecordRequestWithBody(server string, dbBranchName DBBranchNameParam, tableName TableNameParam, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "db_branch_name", runtime.ParamLocationPath, dbBranchName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "table_name", runtime.ParamLocationPath, tableName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/db/%s/tables/%s/data", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteRecordRequest generates requests for DeleteRecord
func NewDeleteRecordRequest(server string, dbBranchName DBBranchNameParam, tableName TableNameParam, recordId RecordIDParam) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "db_branch_name", runtime.ParamLocationPath, dbBranchName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "table_name", runtime.ParamLocationPath, tableName)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "record_id", runtime.ParamLocationPath, recordId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/db/%s/tables/%s/data/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRecordRequest calls the generic GetRecord builder with application/json body
func NewGetRecordRequest(server string, dbBranchName DBBranchNameParam, tableName TableNameParam, recordId RecordIDParam, body GetRecordJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetRecordRequestWithBody(server, dbBranchName, tableName, recordId, "application/json", bodyReader)
}

// NewGetRecordRequestWithBody generates requests for GetRecord with any type of body
func NewGetRecordRequestWithBody(server string, dbBranchName DBBranchNameParam, tableName TableNameParam, recordId RecordIDParam, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "db_branch_name", runtime.ParamLocationPath, dbBranchName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "table_name", runtime.ParamLocationPath, tableName)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "record_id", runtime.ParamLocationPath, recordId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/db/%s/tables/%s/data/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUpdateRecordWithIDRequest calls the generic UpdateRecordWithID builder with application/json body
func NewUpdateRecordWithIDRequest(server string, dbBranchName DBBranchNameParam, tableName TableNameParam, recordId RecordIDParam, params *UpdateRecordWithIDParams, body UpdateRecordWithIDJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateRecordWithIDRequestWithBody(server, dbBranchName, tableName, recordId, params, "application/json", bodyReader)
}

// NewUpdateRecordWithIDRequestWithBody generates requests for UpdateRecordWithID with any type of body
func NewUpdateRecordWithIDRequestWithBody(server string, dbBranchName DBBranchNameParam, tableName TableNameParam, recordId RecordIDParam, params *UpdateRecordWithIDParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "db_branch_name", runtime.ParamLocationPath, dbBranchName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "table_name", runtime.ParamLocationPath, tableName)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "record_id", runtime.ParamLocationPath, recordId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/db/%s/tables/%s/data/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.IfVersion != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ifVersion", runtime.ParamLocationQuery, *params.IfVersion); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUpsertRecordWithIDRequest calls the generic UpsertRecordWithID builder with application/json body
func NewUpsertRecordWithIDRequest(server string, dbBranchName DBBranchNameParam, tableName TableNameParam, recordId RecordIDParam, params *UpsertRecordWithIDParams, body UpsertRecordWithIDJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpsertRecordWithIDRequestWithBody(server, dbBranchName, tableName, recordId, params, "application/json", bodyReader)
}

// NewUpsertRecordWithIDRequestWithBody generates requests for UpsertRecordWithID with any type of body
func NewUpsertRecordWithIDRequestWithBody(server string, dbBranchName DBBranchNameParam, tableName TableNameParam, recordId RecordIDParam, params *UpsertRecordWithIDParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "db_branch_name", runtime.ParamLocationPath, dbBranchName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "table_name", runtime.ParamLocationPath, tableName)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "record_id", runtime.ParamLocationPath, recordId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/db/%s/tables/%s/data/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.IfVersion != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ifVersion", runtime.ParamLocationQuery, *params.IfVersion); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewInsertRecordWithIDRequest calls the generic InsertRecordWithID builder with application/json body
func NewInsertRecordWithIDRequest(server string, dbBranchName DBBranchNameParam, tableName TableNameParam, recordId RecordIDParam, params *InsertRecordWithIDParams, body InsertRecordWithIDJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewInsertRecordWithIDRequestWithBody(server, dbBranchName, tableName, recordId, params, "application/json", bodyReader)
}

// NewInsertRecordWithIDRequestWithBody generates requests for InsertRecordWithID with any type of body
func NewInsertRecordWithIDRequestWithBody(server string, dbBranchName DBBranchNameParam, tableName TableNameParam, recordId RecordIDParam, params *InsertRecordWithIDParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "db_branch_name", runtime.ParamLocationPath, dbBranchName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "table_name", runtime.ParamLocationPath, tableName)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "record_id", runtime.ParamLocationPath, recordId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/db/%s/tables/%s/data/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.CreateOnly != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "createOnly", runtime.ParamLocationQuery, *params.CreateOnly); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.IfVersion != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ifVersion", runtime.ParamLocationQuery, *params.IfVersion); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewQueryTableRequest calls the generic QueryTable builder with application/json body
func NewQueryTableRequest(server string, dbBranchName DBBranchNameParam, tableName TableNameParam, body QueryTableJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewQueryTableRequestWithBody(server, dbBranchName, tableName, "application/json", bodyReader)
}

// NewQueryTableRequestWithBody generates requests for QueryTable with any type of body
func NewQueryTableRequestWithBody(server string, dbBranchName DBBranchNameParam, tableName TableNameParam, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "db_branch_name", runtime.ParamLocationPath, dbBranchName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "table_name", runtime.ParamLocationPath, tableName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/db/%s/tables/%s/query", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetTableSchemaRequest generates requests for GetTableSchema
func NewGetTableSchemaRequest(server string, dbBranchName DBBranchNameParam, tableName TableNameParam) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "db_branch_name", runtime.ParamLocationPath, dbBranchName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "table_name", runtime.ParamLocationPath, tableName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/db/%s/tables/%s/schema", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSetTableSchemaRequest calls the generic SetTableSchema builder with application/json body
func NewSetTableSchemaRequest(server string, dbBranchName DBBranchNameParam, tableName TableNameParam, body SetTableSchemaJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSetTableSchemaRequestWithBody(server, dbBranchName, tableName, "application/json", bodyReader)
}

// NewSetTableSchemaRequestWithBody generates requests for SetTableSchema with any type of body
func NewSetTableSchemaRequestWithBody(server string, dbBranchName DBBranchNameParam, tableName TableNameParam, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "db_branch_name", runtime.ParamLocationPath, dbBranchName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "table_name", runtime.ParamLocationPath, tableName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/db/%s/tables/%s/schema", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetDatabaseListRequest generates requests for GetDatabaseList
func NewGetDatabaseListRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/dbs")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteDatabaseRequest generates requests for DeleteDatabase
func NewDeleteDatabaseRequest(server string, dbName DBNameParam) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "db_name", runtime.ParamLocationPath, dbName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/dbs/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetBranchListRequest generates requests for GetBranchList
func NewGetBranchListRequest(server string, dbName DBNameParam) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "db_name", runtime.ParamLocationPath, dbName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/dbs/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateDatabaseRequest calls the generic CreateDatabase builder with application/json body
func NewCreateDatabaseRequest(server string, dbName DBNameParam, body CreateDatabaseJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateDatabaseRequestWithBody(server, dbName, "application/json", bodyReader)
}

// NewCreateDatabaseRequestWithBody generates requests for CreateDatabase with any type of body
func NewCreateDatabaseRequestWithBody(server string, dbName DBNameParam, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "db_name", runtime.ParamLocationPath, dbName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/dbs/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteUserRequest generates requests for DeleteUser
func NewDeleteUserRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/user")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUserRequest generates requests for GetUser
func NewGetUserRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/user")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateUserRequest calls the generic UpdateUser builder with application/json body
func NewUpdateUserRequest(server string, body UpdateUserJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateUserRequestWithBody(server, "application/json", bodyReader)
}

// NewUpdateUserRequestWithBody generates requests for UpdateUser with any type of body
func NewUpdateUserRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/user")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetUserAPIKeysRequest generates requests for GetUserAPIKeys
func NewGetUserAPIKeysRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/user/keys")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteUserAPIKeyRequest generates requests for DeleteUserAPIKey
func NewDeleteUserAPIKeyRequest(server string, keyName APIKeyNameParam) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "key_name", runtime.ParamLocationPath, keyName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/user/keys/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateUserAPIKeyRequest generates requests for CreateUserAPIKey
func NewCreateUserAPIKeyRequest(server string, keyName APIKeyNameParam) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "key_name", runtime.ParamLocationPath, keyName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/user/keys/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetWorkspacesListRequest generates requests for GetWorkspacesList
func NewGetWorkspacesListRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/workspaces")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateWorkspaceRequest calls the generic CreateWorkspace builder with application/json body
func NewCreateWorkspaceRequest(server string, body CreateWorkspaceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateWorkspaceRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateWorkspaceRequestWithBody generates requests for CreateWorkspace with any type of body
func NewCreateWorkspaceRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/workspaces")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteWorkspaceRequest generates requests for DeleteWorkspace
func NewDeleteWorkspaceRequest(server string, workspaceId WorkspaceIDParam) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace_id", runtime.ParamLocationPath, workspaceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/workspaces/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetWorkspaceRequest generates requests for GetWorkspace
func NewGetWorkspaceRequest(server string, workspaceId WorkspaceIDParam) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace_id", runtime.ParamLocationPath, workspaceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/workspaces/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateWorkspaceRequest calls the generic UpdateWorkspace builder with application/json body
func NewUpdateWorkspaceRequest(server string, workspaceId WorkspaceIDParam, body UpdateWorkspaceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateWorkspaceRequestWithBody(server, workspaceId, "application/json", bodyReader)
}

// NewUpdateWorkspaceRequestWithBody generates requests for UpdateWorkspace with any type of body
func NewUpdateWorkspaceRequestWithBody(server string, workspaceId WorkspaceIDParam, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace_id", runtime.ParamLocationPath, workspaceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/workspaces/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewInviteWorkspaceMemberRequest calls the generic InviteWorkspaceMember builder with application/json body
func NewInviteWorkspaceMemberRequest(server string, workspaceId WorkspaceIDParam, body InviteWorkspaceMemberJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewInviteWorkspaceMemberRequestWithBody(server, workspaceId, "application/json", bodyReader)
}

// NewInviteWorkspaceMemberRequestWithBody generates requests for InviteWorkspaceMember with any type of body
func NewInviteWorkspaceMemberRequestWithBody(server string, workspaceId WorkspaceIDParam, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace_id", runtime.ParamLocationPath, workspaceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/workspaces/%s/invites", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCancelWorkspaceMemberInviteRequest generates requests for CancelWorkspaceMemberInvite
func NewCancelWorkspaceMemberInviteRequest(server string, workspaceId WorkspaceIDParam, inviteId InviteIDParam) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace_id", runtime.ParamLocationPath, workspaceId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "invite_id", runtime.ParamLocationPath, inviteId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/workspaces/%s/invites/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewResendWorkspaceMemberInviteRequest generates requests for ResendWorkspaceMemberInvite
func NewResendWorkspaceMemberInviteRequest(server string, workspaceId WorkspaceIDParam, inviteId InviteIDParam) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace_id", runtime.ParamLocationPath, workspaceId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "invite_id", runtime.ParamLocationPath, inviteId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/workspaces/%s/invites/%s/resend", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAcceptWorkspaceMemberInviteRequest generates requests for AcceptWorkspaceMemberInvite
func NewAcceptWorkspaceMemberInviteRequest(server string, workspaceId WorkspaceIDParam, inviteKey InviteKeyParam) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace_id", runtime.ParamLocationPath, workspaceId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "invite_key", runtime.ParamLocationPath, inviteKey)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/workspaces/%s/invites/%s/accept", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetWorkspaceMembersListRequest generates requests for GetWorkspaceMembersList
func NewGetWorkspaceMembersListRequest(server string, workspaceId WorkspaceIDParam) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace_id", runtime.ParamLocationPath, workspaceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/workspaces/%s/members", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRemoveWorkspaceMemberRequest generates requests for RemoveWorkspaceMember
func NewRemoveWorkspaceMemberRequest(server string, workspaceId WorkspaceIDParam, userId UserIDParam) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace_id", runtime.ParamLocationPath, workspaceId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "user_id", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/workspaces/%s/members/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateWorkspaceMemberRoleRequest calls the generic UpdateWorkspaceMemberRole builder with application/json body
func NewUpdateWorkspaceMemberRoleRequest(server string, workspaceId WorkspaceIDParam, userId UserIDParam, body UpdateWorkspaceMemberRoleJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateWorkspaceMemberRoleRequestWithBody(server, workspaceId, userId, "application/json", bodyReader)
}

// NewUpdateWorkspaceMemberRoleRequestWithBody generates requests for UpdateWorkspaceMemberRole with any type of body
func NewUpdateWorkspaceMemberRoleRequestWithBody(server string, workspaceId WorkspaceIDParam, userId UserIDParam, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace_id", runtime.ParamLocationPath, workspaceId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "user_id", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/workspaces/%s/members/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// DeleteBranch request
	DeleteBranchWithResponse(ctx context.Context, dbBranchName DBBranchNameParam, reqEditors ...RequestEditorFn) (*DeleteBranchResponse, error)

	// GetBranchDetails request
	GetBranchDetailsWithResponse(ctx context.Context, dbBranchName DBBranchNameParam, reqEditors ...RequestEditorFn) (*GetBranchDetailsResponse, error)

	// CreateBranch request with any body
	CreateBranchWithBodyWithResponse(ctx context.Context, dbBranchName DBBranchNameParam, params *CreateBranchParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateBranchResponse, error)

	CreateBranchWithResponse(ctx context.Context, dbBranchName DBBranchNameParam, params *CreateBranchParams, body CreateBranchJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateBranchResponse, error)

	// GetBranchMetadata request
	GetBranchMetadataWithResponse(ctx context.Context, dbBranchName DBBranchNameParam, reqEditors ...RequestEditorFn) (*GetBranchMetadataResponse, error)

	// UpdateBranchMetadata request with any body
	UpdateBranchMetadataWithBodyWithResponse(ctx context.Context, dbBranchName DBBranchNameParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateBranchMetadataResponse, error)

	UpdateBranchMetadataWithResponse(ctx context.Context, dbBranchName DBBranchNameParam, body UpdateBranchMetadataJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateBranchMetadataResponse, error)

	// GetBranchMigrationHistory request with any body
	GetBranchMigrationHistoryWithBodyWithResponse(ctx context.Context, dbBranchName DBBranchNameParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetBranchMigrationHistoryResponse, error)

	GetBranchMigrationHistoryWithResponse(ctx context.Context, dbBranchName DBBranchNameParam, body GetBranchMigrationHistoryJSONRequestBody, reqEditors ...RequestEditorFn) (*GetBranchMigrationHistoryResponse, error)

	// ExecuteBranchMigrationPlan request with any body
	ExecuteBranchMigrationPlanWithBodyWithResponse(ctx context.Context, dbBranchName DBBranchNameParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ExecuteBranchMigrationPlanResponse, error)

	ExecuteBranchMigrationPlanWithResponse(ctx context.Context, dbBranchName DBBranchNameParam, body ExecuteBranchMigrationPlanJSONRequestBody, reqEditors ...RequestEditorFn) (*ExecuteBranchMigrationPlanResponse, error)

	// GetBranchMigrationPlan request with any body
	GetBranchMigrationPlanWithBodyWithResponse(ctx context.Context, dbBranchName DBBranchNameParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetBranchMigrationPlanResponse, error)

	GetBranchMigrationPlanWithResponse(ctx context.Context, dbBranchName DBBranchNameParam, body GetBranchMigrationPlanJSONRequestBody, reqEditors ...RequestEditorFn) (*GetBranchMigrationPlanResponse, error)

	// SearchBranch request with any body
	SearchBranchWithBodyWithResponse(ctx context.Context, dbBranchName DBBranchNameParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SearchBranchResponse, error)

	SearchBranchWithResponse(ctx context.Context, dbBranchName DBBranchNameParam, body SearchBranchJSONRequestBody, reqEditors ...RequestEditorFn) (*SearchBranchResponse, error)

	// GetBranchStats request
	GetBranchStatsWithResponse(ctx context.Context, dbBranchName DBBranchNameParam, reqEditors ...RequestEditorFn) (*GetBranchStatsResponse, error)

	// DeleteTable request
	DeleteTableWithResponse(ctx context.Context, dbBranchName DBBranchNameParam, tableName TableNameParam, reqEditors ...RequestEditorFn) (*DeleteTableResponse, error)

	// UpdateTable request with any body
	UpdateTableWithBodyWithResponse(ctx context.Context, dbBranchName DBBranchNameParam, tableName TableNameParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateTableResponse, error)

	UpdateTableWithResponse(ctx context.Context, dbBranchName DBBranchNameParam, tableName TableNameParam, body UpdateTableJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateTableResponse, error)

	// CreateTable request
	CreateTableWithResponse(ctx context.Context, dbBranchName DBBranchNameParam, tableName TableNameParam, reqEditors ...RequestEditorFn) (*CreateTableResponse, error)

	// BulkInsertTableRecords request with any body
	BulkInsertTableRecordsWithBodyWithResponse(ctx context.Context, dbBranchName DBBranchNameParam, tableName TableNameParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BulkInsertTableRecordsResponse, error)

	BulkInsertTableRecordsWithResponse(ctx context.Context, dbBranchName DBBranchNameParam, tableName TableNameParam, body BulkInsertTableRecordsJSONRequestBody, reqEditors ...RequestEditorFn) (*BulkInsertTableRecordsResponse, error)

	// GetTableColumns request
	GetTableColumnsWithResponse(ctx context.Context, dbBranchName DBBranchNameParam, tableName TableNameParam, reqEditors ...RequestEditorFn) (*GetTableColumnsResponse, error)

	// AddTableColumn request with any body
	AddTableColumnWithBodyWithResponse(ctx context.Context, dbBranchName DBBranchNameParam, tableName TableNameParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddTableColumnResponse, error)

	AddTableColumnWithResponse(ctx context.Context, dbBranchName DBBranchNameParam, tableName TableNameParam, body AddTableColumnJSONRequestBody, reqEditors ...RequestEditorFn) (*AddTableColumnResponse, error)

	// DeleteColumn request
	DeleteColumnWithResponse(ctx context.Context, dbBranchName DBBranchNameParam, tableName TableNameParam, columnName ColumnNameParam, reqEditors ...RequestEditorFn) (*DeleteColumnResponse, error)

	// GetColumn request
	GetColumnWithResponse(ctx context.Context, dbBranchName DBBranchNameParam, tableName TableNameParam, columnName ColumnNameParam, reqEditors ...RequestEditorFn) (*GetColumnResponse, error)

	// UpdateColumn request with any body
	UpdateColumnWithBodyWithResponse(ctx context.Context, dbBranchName DBBranchNameParam, tableName TableNameParam, columnName ColumnNameParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateColumnResponse, error)

	UpdateColumnWithResponse(ctx context.Context, dbBranchName DBBranchNameParam, tableName TableNameParam, columnName ColumnNameParam, body UpdateColumnJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateColumnResponse, error)

	// InsertRecord request with any body
	InsertRecordWithBodyWithResponse(ctx context.Context, dbBranchName DBBranchNameParam, tableName TableNameParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InsertRecordResponse, error)

	InsertRecordWithResponse(ctx context.Context, dbBranchName DBBranchNameParam, tableName TableNameParam, body InsertRecordJSONRequestBody, reqEditors ...RequestEditorFn) (*InsertRecordResponse, error)

	// DeleteRecord request
	DeleteRecordWithResponse(ctx context.Context, dbBranchName DBBranchNameParam, tableName TableNameParam, recordId RecordIDParam, reqEditors ...RequestEditorFn) (*DeleteRecordResponse, error)

	// GetRecord request with any body
	GetRecordWithBodyWithResponse(ctx context.Context, dbBranchName DBBranchNameParam, tableName TableNameParam, recordId RecordIDParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetRecordResponse, error)

	GetRecordWithResponse(ctx context.Context, dbBranchName DBBranchNameParam, tableName TableNameParam, recordId RecordIDParam, body GetRecordJSONRequestBody, reqEditors ...RequestEditorFn) (*GetRecordResponse, error)

	// UpdateRecordWithID request with any body
	UpdateRecordWithIDWithBodyWithResponse(ctx context.Context, dbBranchName DBBranchNameParam, tableName TableNameParam, recordId RecordIDParam, params *UpdateRecordWithIDParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateRecordWithIDResponse, error)

	UpdateRecordWithIDWithResponse(ctx context.Context, dbBranchName DBBranchNameParam, tableName TableNameParam, recordId RecordIDParam, params *UpdateRecordWithIDParams, body UpdateRecordWithIDJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateRecordWithIDResponse, error)

	// UpsertRecordWithID request with any body
	UpsertRecordWithIDWithBodyWithResponse(ctx context.Context, dbBranchName DBBranchNameParam, tableName TableNameParam, recordId RecordIDParam, params *UpsertRecordWithIDParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpsertRecordWithIDResponse, error)

	UpsertRecordWithIDWithResponse(ctx context.Context, dbBranchName DBBranchNameParam, tableName TableNameParam, recordId RecordIDParam, params *UpsertRecordWithIDParams, body UpsertRecordWithIDJSONRequestBody, reqEditors ...RequestEditorFn) (*UpsertRecordWithIDResponse, error)

	// InsertRecordWithID request with any body
	InsertRecordWithIDWithBodyWithResponse(ctx context.Context, dbBranchName DBBranchNameParam, tableName TableNameParam, recordId RecordIDParam, params *InsertRecordWithIDParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InsertRecordWithIDResponse, error)

	InsertRecordWithIDWithResponse(ctx context.Context, dbBranchName DBBranchNameParam, tableName TableNameParam, recordId RecordIDParam, params *InsertRecordWithIDParams, body InsertRecordWithIDJSONRequestBody, reqEditors ...RequestEditorFn) (*InsertRecordWithIDResponse, error)

	// QueryTable request with any body
	QueryTableWithBodyWithResponse(ctx context.Context, dbBranchName DBBranchNameParam, tableName TableNameParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*QueryTableResponse, error)

	QueryTableWithResponse(ctx context.Context, dbBranchName DBBranchNameParam, tableName TableNameParam, body QueryTableJSONRequestBody, reqEditors ...RequestEditorFn) (*QueryTableResponse, error)

	// GetTableSchema request
	GetTableSchemaWithResponse(ctx context.Context, dbBranchName DBBranchNameParam, tableName TableNameParam, reqEditors ...RequestEditorFn) (*GetTableSchemaResponse, error)

	// SetTableSchema request with any body
	SetTableSchemaWithBodyWithResponse(ctx context.Context, dbBranchName DBBranchNameParam, tableName TableNameParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SetTableSchemaResponse, error)

	SetTableSchemaWithResponse(ctx context.Context, dbBranchName DBBranchNameParam, tableName TableNameParam, body SetTableSchemaJSONRequestBody, reqEditors ...RequestEditorFn) (*SetTableSchemaResponse, error)

	// GetDatabaseList request
	GetDatabaseListWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetDatabaseListResponse, error)

	// DeleteDatabase request
	DeleteDatabaseWithResponse(ctx context.Context, dbName DBNameParam, reqEditors ...RequestEditorFn) (*DeleteDatabaseResponse, error)

	// GetBranchList request
	GetBranchListWithResponse(ctx context.Context, dbName DBNameParam, reqEditors ...RequestEditorFn) (*GetBranchListResponse, error)

	// CreateDatabase request with any body
	CreateDatabaseWithBodyWithResponse(ctx context.Context, dbName DBNameParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateDatabaseResponse, error)

	CreateDatabaseWithResponse(ctx context.Context, dbName DBNameParam, body CreateDatabaseJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateDatabaseResponse, error)

	// DeleteUser request
	DeleteUserWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*DeleteUserResponse, error)

	// GetUser request
	GetUserWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetUserResponse, error)

	// UpdateUser request with any body
	UpdateUserWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateUserResponse, error)

	UpdateUserWithResponse(ctx context.Context, body UpdateUserJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateUserResponse, error)

	// GetUserAPIKeys request
	GetUserAPIKeysWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetUserAPIKeysResponse, error)

	// DeleteUserAPIKey request
	DeleteUserAPIKeyWithResponse(ctx context.Context, keyName APIKeyNameParam, reqEditors ...RequestEditorFn) (*DeleteUserAPIKeyResponse, error)

	// CreateUserAPIKey request
	CreateUserAPIKeyWithResponse(ctx context.Context, keyName APIKeyNameParam, reqEditors ...RequestEditorFn) (*CreateUserAPIKeyResponse, error)

	// GetWorkspacesList request
	GetWorkspacesListWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetWorkspacesListResponse, error)

	// CreateWorkspace request with any body
	CreateWorkspaceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateWorkspaceResponse, error)

	CreateWorkspaceWithResponse(ctx context.Context, body CreateWorkspaceJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateWorkspaceResponse, error)

	// DeleteWorkspace request
	DeleteWorkspaceWithResponse(ctx context.Context, workspaceId WorkspaceIDParam, reqEditors ...RequestEditorFn) (*DeleteWorkspaceResponse, error)

	// GetWorkspace request
	GetWorkspaceWithResponse(ctx context.Context, workspaceId WorkspaceIDParam, reqEditors ...RequestEditorFn) (*GetWorkspaceResponse, error)

	// UpdateWorkspace request with any body
	UpdateWorkspaceWithBodyWithResponse(ctx context.Context, workspaceId WorkspaceIDParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateWorkspaceResponse, error)

	UpdateWorkspaceWithResponse(ctx context.Context, workspaceId WorkspaceIDParam, body UpdateWorkspaceJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateWorkspaceResponse, error)

	// InviteWorkspaceMember request with any body
	InviteWorkspaceMemberWithBodyWithResponse(ctx context.Context, workspaceId WorkspaceIDParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InviteWorkspaceMemberResponse, error)

	InviteWorkspaceMemberWithResponse(ctx context.Context, workspaceId WorkspaceIDParam, body InviteWorkspaceMemberJSONRequestBody, reqEditors ...RequestEditorFn) (*InviteWorkspaceMemberResponse, error)

	// CancelWorkspaceMemberInvite request
	CancelWorkspaceMemberInviteWithResponse(ctx context.Context, workspaceId WorkspaceIDParam, inviteId InviteIDParam, reqEditors ...RequestEditorFn) (*CancelWorkspaceMemberInviteResponse, error)

	// ResendWorkspaceMemberInvite request
	ResendWorkspaceMemberInviteWithResponse(ctx context.Context, workspaceId WorkspaceIDParam, inviteId InviteIDParam, reqEditors ...RequestEditorFn) (*ResendWorkspaceMemberInviteResponse, error)

	// AcceptWorkspaceMemberInvite request
	AcceptWorkspaceMemberInviteWithResponse(ctx context.Context, workspaceId WorkspaceIDParam, inviteKey InviteKeyParam, reqEditors ...RequestEditorFn) (*AcceptWorkspaceMemberInviteResponse, error)

	// GetWorkspaceMembersList request
	GetWorkspaceMembersListWithResponse(ctx context.Context, workspaceId WorkspaceIDParam, reqEditors ...RequestEditorFn) (*GetWorkspaceMembersListResponse, error)

	// RemoveWorkspaceMember request
	RemoveWorkspaceMemberWithResponse(ctx context.Context, workspaceId WorkspaceIDParam, userId UserIDParam, reqEditors ...RequestEditorFn) (*RemoveWorkspaceMemberResponse, error)

	// UpdateWorkspaceMemberRole request with any body
	UpdateWorkspaceMemberRoleWithBodyWithResponse(ctx context.Context, workspaceId WorkspaceIDParam, userId UserIDParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateWorkspaceMemberRoleResponse, error)

	UpdateWorkspaceMemberRoleWithResponse(ctx context.Context, workspaceId WorkspaceIDParam, userId UserIDParam, body UpdateWorkspaceMemberRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateWorkspaceMemberRoleResponse, error)
}

type DeleteBranchResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *struct {
		Id      *string `json:"id,omitempty"`
		Message string  `json:"message"`
	}
	JSON401 *struct {
		Id      *string `json:"id,omitempty"`
		Message string  `json:"message"`
	}
	JSON404 *struct {
		Id      *string `json:"id,omitempty"`
		Message string  `json:"message"`
	}
}

// Status returns HTTPResponse.Status
func (r DeleteBranchResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteBranchResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetBranchDetailsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DBBranch
	JSON400      *struct {
		Id      *string `json:"id,omitempty"`
		Message string  `json:"message"`
	}
	JSON401 *struct {
		Id      *string `json:"id,omitempty"`
		Message string  `json:"message"`
	}
	JSON404 *struct {
		Id      *string `json:"id,omitempty"`
		Message string  `json:"message"`
	}
}

// Status returns HTTPResponse.Status
func (r GetBranchDetailsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetBranchDetailsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateBranchResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *struct {
		Id      *string `json:"id,omitempty"`
		Message string  `json:"message"`
	}
	JSON401 *struct {
		Id      *string `json:"id,omitempty"`
		Message string  `json:"message"`
	}
	JSON404 *struct {
		Id      *string `json:"id,omitempty"`
		Message string  `json:"message"`
	}
}

// Status returns HTTPResponse.Status
func (r CreateBranchResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateBranchResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetBranchMetadataResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BranchMetadata
	JSON400      *struct {
		Id      *string `json:"id,omitempty"`
		Message string  `json:"message"`
	}
	JSON401 *struct {
		Id      *string `json:"id,omitempty"`
		Message string  `json:"message"`
	}
	JSON404 *struct {
		Id      *string `json:"id,omitempty"`
		Message string  `json:"message"`
	}
}

// Status returns HTTPResponse.Status
func (r GetBranchMetadataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetBranchMetadataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateBranchMetadataResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *struct {
		Id      *string `json:"id,omitempty"`
		Message string  `json:"message"`
	}
	JSON401 *struct {
		Id      *string `json:"id,omitempty"`
		Message string  `json:"message"`
	}
	JSON404 *struct {
		Id      *string `json:"id,omitempty"`
		Message string  `json:"message"`
	}
}

// Status returns HTTPResponse.Status
func (r UpdateBranchMetadataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateBranchMetadataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetBranchMigrationHistoryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Migrations  *[]BranchMigration   `json:"migrations,omitempty"`
		StartedFrom *StartedFromMetadata `json:"startedFrom,omitempty"`
	}
	JSON400 *struct {
		Id      *string `json:"id,omitempty"`
		Message string  `json:"message"`
	}
	JSON401 *struct {
		Id      *string `json:"id,omitempty"`
		Message string  `json:"message"`
	}
	JSON404 *struct {
		Id      *string `json:"id,omitempty"`
		Message string  `json:"message"`
	}
}

// Status returns HTTPResponse.Status
func (r GetBranchMigrationHistoryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetBranchMigrationHistoryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ExecuteBranchMigrationPlanResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *struct {
		Id      *string `json:"id,omitempty"`
		Message string  `json:"message"`
	}
	JSON401 *struct {
		Id      *string `json:"id,omitempty"`
		Message string  `json:"message"`
	}
	JSON404 *struct {
		Id      *string `json:"id,omitempty"`
		Message string  `json:"message"`
	}
}

// Status returns HTTPResponse.Status
func (r ExecuteBranchMigrationPlanResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ExecuteBranchMigrationPlanResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetBranchMigrationPlanResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Migration BranchMigration `json:"migration"`
		Version   int             `json:"version"`
	}
	JSON400 *struct {
		Id      *string `json:"id,omitempty"`
		Message string  `json:"message"`
	}
	JSON401 *struct {
		Id      *string `json:"id,omitempty"`
		Message string  `json:"message"`
	}
	JSON404 *struct {
		Id      *string `json:"id,omitempty"`
		Message string  `json:"message"`
	}
}

// Status returns HTTPResponse.Status
func (r GetBranchMigrationPlanResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetBranchMigrationPlanResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SearchBranchResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Records []Record `json:"records"`
	}
	JSON400 *struct {
		Id      *string `json:"id,omitempty"`
		Message string  `json:"message"`
	}
	JSON401 *struct {
		Id      *string `json:"id,omitempty"`
		Message string  `json:"message"`
	}
	JSON404 *struct {
		Id      *string `json:"id,omitempty"`
		Message string  `json:"message"`
	}
}

// Status returns HTTPResponse.Status
func (r SearchBranchResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SearchBranchResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetBranchStatsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Interval        string              `json:"interval"`
		NumberOfRecords *[]MetricsDatapoint `json:"numberOfRecords,omitempty"`
		ReadLatency     *MetricsLatency     `json:"readLatency,omitempty"`
		ReadsOverTime   *[]MetricsDatapoint `json:"readsOverTime,omitempty"`
		Resolution      string              `json:"resolution"`
		Timestamp       string              `json:"timestamp"`
		Warning         *string             `json:"warning,omitempty"`
		WriteLatency    *MetricsLatency     `json:"writeLatency,omitempty"`
		WritesOverTime  *[]MetricsDatapoint `json:"writesOverTime,omitempty"`
	}
	JSON400 *struct {
		Id      *string `json:"id,omitempty"`
		Message string  `json:"message"`
	}
	JSON401 *struct {
		Id      *string `json:"id,omitempty"`
		Message string  `json:"message"`
	}
	JSON404 *struct {
		Id      *string `json:"id,omitempty"`
		Message string  `json:"message"`
	}
}

// Status returns HTTPResponse.Status
func (r GetBranchStatsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetBranchStatsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteTableResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *struct {
		Id      *string `json:"id,omitempty"`
		Message string  `json:"message"`
	}
	JSON401 *struct {
		Id      *string `json:"id,omitempty"`
		Message string  `json:"message"`
	}
}

// Status returns HTTPResponse.Status
func (r DeleteTableResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteTableResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateTableResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *struct {
		Id      *string `json:"id,omitempty"`
		Message string  `json:"message"`
	}
	JSON401 *struct {
		Id      *string `json:"id,omitempty"`
		Message string  `json:"message"`
	}
	JSON404 *struct {
		Id      *string `json:"id,omitempty"`
		Message string  `json:"message"`
	}
}

// Status returns HTTPResponse.Status
func (r UpdateTableResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateTableResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateTableResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *struct {
		Id      *string `json:"id,omitempty"`
		Message string  `json:"message"`
	}
	JSON401 *struct {
		Id      *string `json:"id,omitempty"`
		Message string  `json:"message"`
	}
	JSON404 *struct {
		Id      *string `json:"id,omitempty"`
		Message string  `json:"message"`
	}
	JSON422 *struct {
		Id      *string `json:"id,omitempty"`
		Message string  `json:"message"`
	}
}

// Status returns HTTPResponse.Status
func (r CreateTableResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateTableResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BulkInsertTableRecordsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		RecordIDs []string `json:"recordIDs"`
	}
	JSON400 *struct {
		Errors []struct {
			Message *string `json:"message,omitempty"`
		} `json:"errors"`
	}
	JSON401 *struct {
		Id      *string `json:"id,omitempty"`
		Message string  `json:"message"`
	}
	JSON404 *struct {
		Id      *string `json:"id,omitempty"`
		Message string  `json:"message"`
	}
}

// Status returns HTTPResponse.Status
func (r BulkInsertTableRecordsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BulkInsertTableRecordsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTableColumnsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Columns []Column `json:"columns"`
	}
	JSON400 *struct {
		Id      *string `json:"id,omitempty"`
		Message string  `json:"message"`
	}
	JSON401 *struct {
		Id      *string `json:"id,omitempty"`
		Message string  `json:"message"`
	}
	JSON404 *struct {
		Id      *string `json:"id,omitempty"`
		Message string  `json:"message"`
	}
}

// Status returns HTTPResponse.Status
func (r GetTableColumnsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTableColumnsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AddTableColumnResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		MigrationID string `json:"migrationID"`
	}
	JSON400 *struct {
		Id      *string `json:"id,omitempty"`
		Message string  `json:"message"`
	}
	JSON401 *struct {
		Id      *string `json:"id,omitempty"`
		Message string  `json:"message"`
	}
	JSON404 *struct {
		Id      *string `json:"id,omitempty"`
		Message string  `json:"message"`
	}
}

// Status returns HTTPResponse.Status
func (r AddTableColumnResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddTableColumnResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteColumnResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		MigrationID string `json:"migrationID"`
	}
	JSON400 *struct {
		Id      *string `json:"id,omitempty"`
		Message string  `json:"message"`
	}
	JSON401 *struct {
		Id      *string `json:"id,omitempty"`
		Message string  `json:"message"`
	}
	JSON404 *struct {
		Id      *string `json:"id,omitempty"`
		Message string  `json:"message"`
	}
}

// Status returns HTTPResponse.Status
func (r DeleteColumnResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteColumnResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetColumnResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Column
	JSON400      *struct {
		Id      *string `json:"id,omitempty"`
		Message string  `json:"message"`
	}
	JSON401 *struct {
		Id      *string `json:"id,omitempty"`
		Message string  `json:"message"`
	}
	JSON404 *struct {
		Id      *string `json:"id,omitempty"`
		Message string  `json:"message"`
	}
}

// Status returns HTTPResponse.Status
func (r GetColumnResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetColumnResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateColumnResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		MigrationID string `json:"migrationID"`
	}
	JSON400 *struct {
		Id      *string `json:"id,omitempty"`
		Message string  `json:"message"`
	}
	JSON401 *struct {
		Id      *string `json:"id,omitempty"`
		Message string  `json:"message"`
	}
	JSON404 *struct {
		Id      *string `json:"id,omitempty"`
		Message string  `json:"message"`
	}
}

// Status returns HTTPResponse.Status
func (r UpdateColumnResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateColumnResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InsertRecordResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		Id   string `json:"id"`
		Xata struct {
			Version int `json:"version"`
		} `json:"xata"`
	}
	JSON400 *struct {
		Id      *string `json:"id,omitempty"`
		Message string  `json:"message"`
	}
	JSON401 *struct {
		Id      *string `json:"id,omitempty"`
		Message string  `json:"message"`
	}
	JSON404 *struct {
		Id      *string `json:"id,omitempty"`
		Message string  `json:"message"`
	}
}

// Status returns HTTPResponse.Status
func (r InsertRecordResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InsertRecordResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteRecordResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *struct {
		Id      *string `json:"id,omitempty"`
		Message string  `json:"message"`
	}
	JSON401 *struct {
		Id      *string `json:"id,omitempty"`
		Message string  `json:"message"`
	}
	JSON404 *struct {
		Id      *string `json:"id,omitempty"`
		Message string  `json:"message"`
	}
}

// Status returns HTTPResponse.Status
func (r DeleteRecordResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteRecordResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRecordResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Record
	JSON400      *struct {
		Id      *string `json:"id,omitempty"`
		Message string  `json:"message"`
	}
	JSON401 *struct {
		Id      *string `json:"id,omitempty"`
		Message string  `json:"message"`
	}
	JSON404 *struct {
		Id      *string `json:"id,omitempty"`
		Message string  `json:"message"`
	}
}

// Status returns HTTPResponse.Status
func (r GetRecordResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRecordResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateRecordWithIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Id   string `json:"id"`
		Xata struct {
			Version int `json:"version"`
		} `json:"xata"`
	}
	JSON400 *struct {
		Id      *string `json:"id,omitempty"`
		Message string  `json:"message"`
	}
	JSON401 *struct {
		Id      *string `json:"id,omitempty"`
		Message string  `json:"message"`
	}
	JSON404 *struct {
		Id      *string `json:"id,omitempty"`
		Message string  `json:"message"`
	}
	JSON422 *struct {
		Id      *string `json:"id,omitempty"`
		Message string  `json:"message"`
	}
}

// Status returns HTTPResponse.Status
func (r UpdateRecordWithIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateRecordWithIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpsertRecordWithIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Id   string `json:"id"`
		Xata struct {
			Version int `json:"version"`
		} `json:"xata"`
	}
	JSON400 *struct {
		Id      *string `json:"id,omitempty"`
		Message string  `json:"message"`
	}
	JSON401 *struct {
		Id      *string `json:"id,omitempty"`
		Message string  `json:"message"`
	}
	JSON404 *struct {
		Id      *string `json:"id,omitempty"`
		Message string  `json:"message"`
	}
	JSON422 *struct {
		Id      *string `json:"id,omitempty"`
		Message string  `json:"message"`
	}
}

// Status returns HTTPResponse.Status
func (r UpsertRecordWithIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpsertRecordWithIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InsertRecordWithIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		Id   string `json:"id"`
		Xata struct {
			Version int `json:"version"`
		} `json:"xata"`
	}
	JSON400 *struct {
		Id      *string `json:"id,omitempty"`
		Message string  `json:"message"`
	}
	JSON401 *struct {
		Id      *string `json:"id,omitempty"`
		Message string  `json:"message"`
	}
	JSON404 *struct {
		Id      *string `json:"id,omitempty"`
		Message string  `json:"message"`
	}
	JSON422 *struct {
		Id      *string `json:"id,omitempty"`
		Message string  `json:"message"`
	}
}

// Status returns HTTPResponse.Status
func (r InsertRecordWithIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InsertRecordWithIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type QueryTableResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Records metadata
		Meta    RecordsMetadata `json:"meta"`
		Records []Record        `json:"records"`
	}
	JSON400 *struct {
		Id      *string `json:"id,omitempty"`
		Message string  `json:"message"`
	}
	JSON401 *struct {
		Id      *string `json:"id,omitempty"`
		Message string  `json:"message"`
	}
	JSON404 *struct {
		Id      *string `json:"id,omitempty"`
		Message string  `json:"message"`
	}
}

// Status returns HTTPResponse.Status
func (r QueryTableResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r QueryTableResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTableSchemaResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Columns []Column `json:"columns"`
	}
	JSON400 *struct {
		Id      *string `json:"id,omitempty"`
		Message string  `json:"message"`
	}
	JSON401 *struct {
		Id      *string `json:"id,omitempty"`
		Message string  `json:"message"`
	}
	JSON404 *struct {
		Id      *string `json:"id,omitempty"`
		Message string  `json:"message"`
	}
}

// Status returns HTTPResponse.Status
func (r GetTableSchemaResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTableSchemaResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SetTableSchemaResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *struct {
		Id      *string `json:"id,omitempty"`
		Message string  `json:"message"`
	}
	JSON401 *struct {
		Id      *string `json:"id,omitempty"`
		Message string  `json:"message"`
	}
	JSON404 *struct {
		Id      *string `json:"id,omitempty"`
		Message string  `json:"message"`
	}
	JSON409 *struct {
		Id      *string `json:"id,omitempty"`
		Message string  `json:"message"`
	}
}

// Status returns HTTPResponse.Status
func (r SetTableSchemaResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SetTableSchemaResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDatabaseListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListDatabasesResponse
	JSON400      *struct {
		Id      *string `json:"id,omitempty"`
		Message string  `json:"message"`
	}
	JSON401 *struct {
		Id      *string `json:"id,omitempty"`
		Message string  `json:"message"`
	}
}

// Status returns HTTPResponse.Status
func (r GetDatabaseListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDatabaseListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteDatabaseResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *struct {
		Id      *string `json:"id,omitempty"`
		Message string  `json:"message"`
	}
	JSON401 *struct {
		Id      *string `json:"id,omitempty"`
		Message string  `json:"message"`
	}
	JSON404 *struct {
		Id      *string `json:"id,omitempty"`
		Message string  `json:"message"`
	}
}

// Status returns HTTPResponse.Status
func (r DeleteDatabaseResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteDatabaseResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetBranchListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListBranchesResponse
	JSON400      *struct {
		Id      *string `json:"id,omitempty"`
		Message string  `json:"message"`
	}
	JSON401 *struct {
		Id      *string `json:"id,omitempty"`
		Message string  `json:"message"`
	}
	JSON404 *struct {
		Id      *string `json:"id,omitempty"`
		Message string  `json:"message"`
	}
}

// Status returns HTTPResponse.Status
func (r GetBranchListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetBranchListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateDatabaseResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		BranchName   *string `json:"branchName,omitempty"`
		DatabaseName string  `json:"databaseName"`
	}
	JSON400 *struct {
		Id      *string `json:"id,omitempty"`
		Message string  `json:"message"`
	}
	JSON401 *struct {
		Id      *string `json:"id,omitempty"`
		Message string  `json:"message"`
	}
}

// Status returns HTTPResponse.Status
func (r CreateDatabaseResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateDatabaseResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *struct {
		Id      *string `json:"id,omitempty"`
		Message string  `json:"message"`
	}
	JSON401 *struct {
		Id      *string `json:"id,omitempty"`
		Message string  `json:"message"`
	}
	JSON404 *struct {
		Id      *string `json:"id,omitempty"`
		Message string  `json:"message"`
	}
}

// Status returns HTTPResponse.Status
func (r DeleteUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserWithID
	JSON400      *struct {
		Id      *string `json:"id,omitempty"`
		Message string  `json:"message"`
	}
	JSON401 *struct {
		Id      *string `json:"id,omitempty"`
		Message string  `json:"message"`
	}
	JSON404 *struct {
		Id      *string `json:"id,omitempty"`
		Message string  `json:"message"`
	}
}

// Status returns HTTPResponse.Status
func (r GetUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserWithID
	JSON400      *struct {
		Id      *string `json:"id,omitempty"`
		Message string  `json:"message"`
	}
	JSON401 *struct {
		Id      *string `json:"id,omitempty"`
		Message string  `json:"message"`
	}
	JSON404 *struct {
		Id      *string `json:"id,omitempty"`
		Message string  `json:"message"`
	}
}

// Status returns HTTPResponse.Status
func (r UpdateUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserAPIKeysResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Keys []struct {
			CreatedAt DateTime `json:"createdAt"`
			Name      string   `json:"name"`
		} `json:"keys"`
	}
	JSON400 *struct {
		Id      *string `json:"id,omitempty"`
		Message string  `json:"message"`
	}
	JSON401 *struct {
		Id      *string `json:"id,omitempty"`
		Message string  `json:"message"`
	}
	JSON404 *struct {
		Id      *string `json:"id,omitempty"`
		Message string  `json:"message"`
	}
}

// Status returns HTTPResponse.Status
func (r GetUserAPIKeysResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserAPIKeysResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteUserAPIKeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *struct {
		Id      *string `json:"id,omitempty"`
		Message string  `json:"message"`
	}
	JSON401 *struct {
		Id      *string `json:"id,omitempty"`
		Message string  `json:"message"`
	}
	JSON404 *struct {
		Id      *string `json:"id,omitempty"`
		Message string  `json:"message"`
	}
}

// Status returns HTTPResponse.Status
func (r DeleteUserAPIKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteUserAPIKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateUserAPIKeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		CreatedAt DateTime `json:"createdAt"`
		Key       string   `json:"key"`
		Name      string   `json:"name"`
	}
	JSON400 *struct {
		Id      *string `json:"id,omitempty"`
		Message string  `json:"message"`
	}
	JSON401 *struct {
		Id      *string `json:"id,omitempty"`
		Message string  `json:"message"`
	}
	JSON404 *struct {
		Id      *string `json:"id,omitempty"`
		Message string  `json:"message"`
	}
}

// Status returns HTTPResponse.Status
func (r CreateUserAPIKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateUserAPIKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetWorkspacesListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Workspaces []struct {
			Id   WorkspaceID `json:"id"`
			Name string      `json:"name"`
			Role Role        `json:"role"`
			Slug string      `json:"slug"`
		} `json:"workspaces"`
	}
	JSON400 *struct {
		Id      *string `json:"id,omitempty"`
		Message string  `json:"message"`
	}
	JSON401 *struct {
		Id      *string `json:"id,omitempty"`
		Message string  `json:"message"`
	}
	JSON404 *struct {
		Id      *string `json:"id,omitempty"`
		Message string  `json:"message"`
	}
}

// Status returns HTTPResponse.Status
func (r GetWorkspacesListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetWorkspacesListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateWorkspaceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Workspace
	JSON400      *struct {
		Id      *string `json:"id,omitempty"`
		Message string  `json:"message"`
	}
	JSON401 *struct {
		Id      *string `json:"id,omitempty"`
		Message string  `json:"message"`
	}
	JSON404 *struct {
		Id      *string `json:"id,omitempty"`
		Message string  `json:"message"`
	}
}

// Status returns HTTPResponse.Status
func (r CreateWorkspaceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateWorkspaceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteWorkspaceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *struct {
		Id      *string `json:"id,omitempty"`
		Message string  `json:"message"`
	}
	JSON401 *struct {
		Id      *string `json:"id,omitempty"`
		Message string  `json:"message"`
	}
	JSON404 *struct {
		Id      *string `json:"id,omitempty"`
		Message string  `json:"message"`
	}
}

// Status returns HTTPResponse.Status
func (r DeleteWorkspaceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteWorkspaceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetWorkspaceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Workspace
	JSON400      *struct {
		Id      *string `json:"id,omitempty"`
		Message string  `json:"message"`
	}
	JSON401 *struct {
		Id      *string `json:"id,omitempty"`
		Message string  `json:"message"`
	}
	JSON404 *struct {
		Id      *string `json:"id,omitempty"`
		Message string  `json:"message"`
	}
}

// Status returns HTTPResponse.Status
func (r GetWorkspaceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetWorkspaceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateWorkspaceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Workspace
	JSON400      *struct {
		Id      *string `json:"id,omitempty"`
		Message string  `json:"message"`
	}
	JSON401 *struct {
		Id      *string `json:"id,omitempty"`
		Message string  `json:"message"`
	}
	JSON404 *struct {
		Id      *string `json:"id,omitempty"`
		Message string  `json:"message"`
	}
}

// Status returns HTTPResponse.Status
func (r UpdateWorkspaceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateWorkspaceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InviteWorkspaceMemberResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *WorkspaceInvite
	JSON400      *struct {
		Id      *string `json:"id,omitempty"`
		Message string  `json:"message"`
	}
	JSON401 *struct {
		Id      *string `json:"id,omitempty"`
		Message string  `json:"message"`
	}
	JSON404 *struct {
		Id      *string `json:"id,omitempty"`
		Message string  `json:"message"`
	}
}

// Status returns HTTPResponse.Status
func (r InviteWorkspaceMemberResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InviteWorkspaceMemberResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CancelWorkspaceMemberInviteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *struct {
		Id      *string `json:"id,omitempty"`
		Message string  `json:"message"`
	}
	JSON401 *struct {
		Id      *string `json:"id,omitempty"`
		Message string  `json:"message"`
	}
	JSON404 *struct {
		Id      *string `json:"id,omitempty"`
		Message string  `json:"message"`
	}
}

// Status returns HTTPResponse.Status
func (r CancelWorkspaceMemberInviteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CancelWorkspaceMemberInviteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ResendWorkspaceMemberInviteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *struct {
		Id      *string `json:"id,omitempty"`
		Message string  `json:"message"`
	}
	JSON401 *struct {
		Id      *string `json:"id,omitempty"`
		Message string  `json:"message"`
	}
	JSON404 *struct {
		Id      *string `json:"id,omitempty"`
		Message string  `json:"message"`
	}
}

// Status returns HTTPResponse.Status
func (r ResendWorkspaceMemberInviteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ResendWorkspaceMemberInviteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AcceptWorkspaceMemberInviteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *struct {
		Id      *string `json:"id,omitempty"`
		Message string  `json:"message"`
	}
	JSON401 *struct {
		Id      *string `json:"id,omitempty"`
		Message string  `json:"message"`
	}
	JSON404 *struct {
		Id      *string `json:"id,omitempty"`
		Message string  `json:"message"`
	}
}

// Status returns HTTPResponse.Status
func (r AcceptWorkspaceMemberInviteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AcceptWorkspaceMemberInviteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetWorkspaceMembersListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *WorkspaceMembers
	JSON400      *struct {
		Id      *string `json:"id,omitempty"`
		Message string  `json:"message"`
	}
	JSON401 *struct {
		Id      *string `json:"id,omitempty"`
		Message string  `json:"message"`
	}
	JSON404 *struct {
		Id      *string `json:"id,omitempty"`
		Message string  `json:"message"`
	}
}

// Status returns HTTPResponse.Status
func (r GetWorkspaceMembersListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetWorkspaceMembersListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RemoveWorkspaceMemberResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *struct {
		Id      *string `json:"id,omitempty"`
		Message string  `json:"message"`
	}
	JSON401 *struct {
		Id      *string `json:"id,omitempty"`
		Message string  `json:"message"`
	}
	JSON404 *struct {
		Id      *string `json:"id,omitempty"`
		Message string  `json:"message"`
	}
}

// Status returns HTTPResponse.Status
func (r RemoveWorkspaceMemberResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RemoveWorkspaceMemberResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateWorkspaceMemberRoleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *struct {
		Id      *string `json:"id,omitempty"`
		Message string  `json:"message"`
	}
	JSON401 *struct {
		Id      *string `json:"id,omitempty"`
		Message string  `json:"message"`
	}
	JSON404 *struct {
		Id      *string `json:"id,omitempty"`
		Message string  `json:"message"`
	}
}

// Status returns HTTPResponse.Status
func (r UpdateWorkspaceMemberRoleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateWorkspaceMemberRoleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// DeleteBranchWithResponse request returning *DeleteBranchResponse
func (c *ClientWithResponses) DeleteBranchWithResponse(ctx context.Context, dbBranchName DBBranchNameParam, reqEditors ...RequestEditorFn) (*DeleteBranchResponse, error) {
	rsp, err := c.DeleteBranch(ctx, dbBranchName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteBranchResponse(rsp)
}

// GetBranchDetailsWithResponse request returning *GetBranchDetailsResponse
func (c *ClientWithResponses) GetBranchDetailsWithResponse(ctx context.Context, dbBranchName DBBranchNameParam, reqEditors ...RequestEditorFn) (*GetBranchDetailsResponse, error) {
	rsp, err := c.GetBranchDetails(ctx, dbBranchName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetBranchDetailsResponse(rsp)
}

// CreateBranchWithBodyWithResponse request with arbitrary body returning *CreateBranchResponse
func (c *ClientWithResponses) CreateBranchWithBodyWithResponse(ctx context.Context, dbBranchName DBBranchNameParam, params *CreateBranchParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateBranchResponse, error) {
	rsp, err := c.CreateBranchWithBody(ctx, dbBranchName, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateBranchResponse(rsp)
}

func (c *ClientWithResponses) CreateBranchWithResponse(ctx context.Context, dbBranchName DBBranchNameParam, params *CreateBranchParams, body CreateBranchJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateBranchResponse, error) {
	rsp, err := c.CreateBranch(ctx, dbBranchName, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateBranchResponse(rsp)
}

// GetBranchMetadataWithResponse request returning *GetBranchMetadataResponse
func (c *ClientWithResponses) GetBranchMetadataWithResponse(ctx context.Context, dbBranchName DBBranchNameParam, reqEditors ...RequestEditorFn) (*GetBranchMetadataResponse, error) {
	rsp, err := c.GetBranchMetadata(ctx, dbBranchName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetBranchMetadataResponse(rsp)
}

// UpdateBranchMetadataWithBodyWithResponse request with arbitrary body returning *UpdateBranchMetadataResponse
func (c *ClientWithResponses) UpdateBranchMetadataWithBodyWithResponse(ctx context.Context, dbBranchName DBBranchNameParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateBranchMetadataResponse, error) {
	rsp, err := c.UpdateBranchMetadataWithBody(ctx, dbBranchName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateBranchMetadataResponse(rsp)
}

func (c *ClientWithResponses) UpdateBranchMetadataWithResponse(ctx context.Context, dbBranchName DBBranchNameParam, body UpdateBranchMetadataJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateBranchMetadataResponse, error) {
	rsp, err := c.UpdateBranchMetadata(ctx, dbBranchName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateBranchMetadataResponse(rsp)
}

// GetBranchMigrationHistoryWithBodyWithResponse request with arbitrary body returning *GetBranchMigrationHistoryResponse
func (c *ClientWithResponses) GetBranchMigrationHistoryWithBodyWithResponse(ctx context.Context, dbBranchName DBBranchNameParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetBranchMigrationHistoryResponse, error) {
	rsp, err := c.GetBranchMigrationHistoryWithBody(ctx, dbBranchName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetBranchMigrationHistoryResponse(rsp)
}

func (c *ClientWithResponses) GetBranchMigrationHistoryWithResponse(ctx context.Context, dbBranchName DBBranchNameParam, body GetBranchMigrationHistoryJSONRequestBody, reqEditors ...RequestEditorFn) (*GetBranchMigrationHistoryResponse, error) {
	rsp, err := c.GetBranchMigrationHistory(ctx, dbBranchName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetBranchMigrationHistoryResponse(rsp)
}

// ExecuteBranchMigrationPlanWithBodyWithResponse request with arbitrary body returning *ExecuteBranchMigrationPlanResponse
func (c *ClientWithResponses) ExecuteBranchMigrationPlanWithBodyWithResponse(ctx context.Context, dbBranchName DBBranchNameParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ExecuteBranchMigrationPlanResponse, error) {
	rsp, err := c.ExecuteBranchMigrationPlanWithBody(ctx, dbBranchName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseExecuteBranchMigrationPlanResponse(rsp)
}

func (c *ClientWithResponses) ExecuteBranchMigrationPlanWithResponse(ctx context.Context, dbBranchName DBBranchNameParam, body ExecuteBranchMigrationPlanJSONRequestBody, reqEditors ...RequestEditorFn) (*ExecuteBranchMigrationPlanResponse, error) {
	rsp, err := c.ExecuteBranchMigrationPlan(ctx, dbBranchName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseExecuteBranchMigrationPlanResponse(rsp)
}

// GetBranchMigrationPlanWithBodyWithResponse request with arbitrary body returning *GetBranchMigrationPlanResponse
func (c *ClientWithResponses) GetBranchMigrationPlanWithBodyWithResponse(ctx context.Context, dbBranchName DBBranchNameParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetBranchMigrationPlanResponse, error) {
	rsp, err := c.GetBranchMigrationPlanWithBody(ctx, dbBranchName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetBranchMigrationPlanResponse(rsp)
}

func (c *ClientWithResponses) GetBranchMigrationPlanWithResponse(ctx context.Context, dbBranchName DBBranchNameParam, body GetBranchMigrationPlanJSONRequestBody, reqEditors ...RequestEditorFn) (*GetBranchMigrationPlanResponse, error) {
	rsp, err := c.GetBranchMigrationPlan(ctx, dbBranchName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetBranchMigrationPlanResponse(rsp)
}

// SearchBranchWithBodyWithResponse request with arbitrary body returning *SearchBranchResponse
func (c *ClientWithResponses) SearchBranchWithBodyWithResponse(ctx context.Context, dbBranchName DBBranchNameParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SearchBranchResponse, error) {
	rsp, err := c.SearchBranchWithBody(ctx, dbBranchName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSearchBranchResponse(rsp)
}

func (c *ClientWithResponses) SearchBranchWithResponse(ctx context.Context, dbBranchName DBBranchNameParam, body SearchBranchJSONRequestBody, reqEditors ...RequestEditorFn) (*SearchBranchResponse, error) {
	rsp, err := c.SearchBranch(ctx, dbBranchName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSearchBranchResponse(rsp)
}

// GetBranchStatsWithResponse request returning *GetBranchStatsResponse
func (c *ClientWithResponses) GetBranchStatsWithResponse(ctx context.Context, dbBranchName DBBranchNameParam, reqEditors ...RequestEditorFn) (*GetBranchStatsResponse, error) {
	rsp, err := c.GetBranchStats(ctx, dbBranchName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetBranchStatsResponse(rsp)
}

// DeleteTableWithResponse request returning *DeleteTableResponse
func (c *ClientWithResponses) DeleteTableWithResponse(ctx context.Context, dbBranchName DBBranchNameParam, tableName TableNameParam, reqEditors ...RequestEditorFn) (*DeleteTableResponse, error) {
	rsp, err := c.DeleteTable(ctx, dbBranchName, tableName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteTableResponse(rsp)
}

// UpdateTableWithBodyWithResponse request with arbitrary body returning *UpdateTableResponse
func (c *ClientWithResponses) UpdateTableWithBodyWithResponse(ctx context.Context, dbBranchName DBBranchNameParam, tableName TableNameParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateTableResponse, error) {
	rsp, err := c.UpdateTableWithBody(ctx, dbBranchName, tableName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateTableResponse(rsp)
}

func (c *ClientWithResponses) UpdateTableWithResponse(ctx context.Context, dbBranchName DBBranchNameParam, tableName TableNameParam, body UpdateTableJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateTableResponse, error) {
	rsp, err := c.UpdateTable(ctx, dbBranchName, tableName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateTableResponse(rsp)
}

// CreateTableWithResponse request returning *CreateTableResponse
func (c *ClientWithResponses) CreateTableWithResponse(ctx context.Context, dbBranchName DBBranchNameParam, tableName TableNameParam, reqEditors ...RequestEditorFn) (*CreateTableResponse, error) {
	rsp, err := c.CreateTable(ctx, dbBranchName, tableName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateTableResponse(rsp)
}

// BulkInsertTableRecordsWithBodyWithResponse request with arbitrary body returning *BulkInsertTableRecordsResponse
func (c *ClientWithResponses) BulkInsertTableRecordsWithBodyWithResponse(ctx context.Context, dbBranchName DBBranchNameParam, tableName TableNameParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BulkInsertTableRecordsResponse, error) {
	rsp, err := c.BulkInsertTableRecordsWithBody(ctx, dbBranchName, tableName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBulkInsertTableRecordsResponse(rsp)
}

func (c *ClientWithResponses) BulkInsertTableRecordsWithResponse(ctx context.Context, dbBranchName DBBranchNameParam, tableName TableNameParam, body BulkInsertTableRecordsJSONRequestBody, reqEditors ...RequestEditorFn) (*BulkInsertTableRecordsResponse, error) {
	rsp, err := c.BulkInsertTableRecords(ctx, dbBranchName, tableName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBulkInsertTableRecordsResponse(rsp)
}

// GetTableColumnsWithResponse request returning *GetTableColumnsResponse
func (c *ClientWithResponses) GetTableColumnsWithResponse(ctx context.Context, dbBranchName DBBranchNameParam, tableName TableNameParam, reqEditors ...RequestEditorFn) (*GetTableColumnsResponse, error) {
	rsp, err := c.GetTableColumns(ctx, dbBranchName, tableName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTableColumnsResponse(rsp)
}

// AddTableColumnWithBodyWithResponse request with arbitrary body returning *AddTableColumnResponse
func (c *ClientWithResponses) AddTableColumnWithBodyWithResponse(ctx context.Context, dbBranchName DBBranchNameParam, tableName TableNameParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddTableColumnResponse, error) {
	rsp, err := c.AddTableColumnWithBody(ctx, dbBranchName, tableName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddTableColumnResponse(rsp)
}

func (c *ClientWithResponses) AddTableColumnWithResponse(ctx context.Context, dbBranchName DBBranchNameParam, tableName TableNameParam, body AddTableColumnJSONRequestBody, reqEditors ...RequestEditorFn) (*AddTableColumnResponse, error) {
	rsp, err := c.AddTableColumn(ctx, dbBranchName, tableName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddTableColumnResponse(rsp)
}

// DeleteColumnWithResponse request returning *DeleteColumnResponse
func (c *ClientWithResponses) DeleteColumnWithResponse(ctx context.Context, dbBranchName DBBranchNameParam, tableName TableNameParam, columnName ColumnNameParam, reqEditors ...RequestEditorFn) (*DeleteColumnResponse, error) {
	rsp, err := c.DeleteColumn(ctx, dbBranchName, tableName, columnName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteColumnResponse(rsp)
}

// GetColumnWithResponse request returning *GetColumnResponse
func (c *ClientWithResponses) GetColumnWithResponse(ctx context.Context, dbBranchName DBBranchNameParam, tableName TableNameParam, columnName ColumnNameParam, reqEditors ...RequestEditorFn) (*GetColumnResponse, error) {
	rsp, err := c.GetColumn(ctx, dbBranchName, tableName, columnName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetColumnResponse(rsp)
}

// UpdateColumnWithBodyWithResponse request with arbitrary body returning *UpdateColumnResponse
func (c *ClientWithResponses) UpdateColumnWithBodyWithResponse(ctx context.Context, dbBranchName DBBranchNameParam, tableName TableNameParam, columnName ColumnNameParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateColumnResponse, error) {
	rsp, err := c.UpdateColumnWithBody(ctx, dbBranchName, tableName, columnName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateColumnResponse(rsp)
}

func (c *ClientWithResponses) UpdateColumnWithResponse(ctx context.Context, dbBranchName DBBranchNameParam, tableName TableNameParam, columnName ColumnNameParam, body UpdateColumnJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateColumnResponse, error) {
	rsp, err := c.UpdateColumn(ctx, dbBranchName, tableName, columnName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateColumnResponse(rsp)
}

// InsertRecordWithBodyWithResponse request with arbitrary body returning *InsertRecordResponse
func (c *ClientWithResponses) InsertRecordWithBodyWithResponse(ctx context.Context, dbBranchName DBBranchNameParam, tableName TableNameParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InsertRecordResponse, error) {
	rsp, err := c.InsertRecordWithBody(ctx, dbBranchName, tableName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInsertRecordResponse(rsp)
}

func (c *ClientWithResponses) InsertRecordWithResponse(ctx context.Context, dbBranchName DBBranchNameParam, tableName TableNameParam, body InsertRecordJSONRequestBody, reqEditors ...RequestEditorFn) (*InsertRecordResponse, error) {
	rsp, err := c.InsertRecord(ctx, dbBranchName, tableName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInsertRecordResponse(rsp)
}

// DeleteRecordWithResponse request returning *DeleteRecordResponse
func (c *ClientWithResponses) DeleteRecordWithResponse(ctx context.Context, dbBranchName DBBranchNameParam, tableName TableNameParam, recordId RecordIDParam, reqEditors ...RequestEditorFn) (*DeleteRecordResponse, error) {
	rsp, err := c.DeleteRecord(ctx, dbBranchName, tableName, recordId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteRecordResponse(rsp)
}

// GetRecordWithBodyWithResponse request with arbitrary body returning *GetRecordResponse
func (c *ClientWithResponses) GetRecordWithBodyWithResponse(ctx context.Context, dbBranchName DBBranchNameParam, tableName TableNameParam, recordId RecordIDParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetRecordResponse, error) {
	rsp, err := c.GetRecordWithBody(ctx, dbBranchName, tableName, recordId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRecordResponse(rsp)
}

func (c *ClientWithResponses) GetRecordWithResponse(ctx context.Context, dbBranchName DBBranchNameParam, tableName TableNameParam, recordId RecordIDParam, body GetRecordJSONRequestBody, reqEditors ...RequestEditorFn) (*GetRecordResponse, error) {
	rsp, err := c.GetRecord(ctx, dbBranchName, tableName, recordId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRecordResponse(rsp)
}

// UpdateRecordWithIDWithBodyWithResponse request with arbitrary body returning *UpdateRecordWithIDResponse
func (c *ClientWithResponses) UpdateRecordWithIDWithBodyWithResponse(ctx context.Context, dbBranchName DBBranchNameParam, tableName TableNameParam, recordId RecordIDParam, params *UpdateRecordWithIDParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateRecordWithIDResponse, error) {
	rsp, err := c.UpdateRecordWithIDWithBody(ctx, dbBranchName, tableName, recordId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateRecordWithIDResponse(rsp)
}

func (c *ClientWithResponses) UpdateRecordWithIDWithResponse(ctx context.Context, dbBranchName DBBranchNameParam, tableName TableNameParam, recordId RecordIDParam, params *UpdateRecordWithIDParams, body UpdateRecordWithIDJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateRecordWithIDResponse, error) {
	rsp, err := c.UpdateRecordWithID(ctx, dbBranchName, tableName, recordId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateRecordWithIDResponse(rsp)
}

// UpsertRecordWithIDWithBodyWithResponse request with arbitrary body returning *UpsertRecordWithIDResponse
func (c *ClientWithResponses) UpsertRecordWithIDWithBodyWithResponse(ctx context.Context, dbBranchName DBBranchNameParam, tableName TableNameParam, recordId RecordIDParam, params *UpsertRecordWithIDParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpsertRecordWithIDResponse, error) {
	rsp, err := c.UpsertRecordWithIDWithBody(ctx, dbBranchName, tableName, recordId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpsertRecordWithIDResponse(rsp)
}

func (c *ClientWithResponses) UpsertRecordWithIDWithResponse(ctx context.Context, dbBranchName DBBranchNameParam, tableName TableNameParam, recordId RecordIDParam, params *UpsertRecordWithIDParams, body UpsertRecordWithIDJSONRequestBody, reqEditors ...RequestEditorFn) (*UpsertRecordWithIDResponse, error) {
	rsp, err := c.UpsertRecordWithID(ctx, dbBranchName, tableName, recordId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpsertRecordWithIDResponse(rsp)
}

// InsertRecordWithIDWithBodyWithResponse request with arbitrary body returning *InsertRecordWithIDResponse
func (c *ClientWithResponses) InsertRecordWithIDWithBodyWithResponse(ctx context.Context, dbBranchName DBBranchNameParam, tableName TableNameParam, recordId RecordIDParam, params *InsertRecordWithIDParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InsertRecordWithIDResponse, error) {
	rsp, err := c.InsertRecordWithIDWithBody(ctx, dbBranchName, tableName, recordId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInsertRecordWithIDResponse(rsp)
}

func (c *ClientWithResponses) InsertRecordWithIDWithResponse(ctx context.Context, dbBranchName DBBranchNameParam, tableName TableNameParam, recordId RecordIDParam, params *InsertRecordWithIDParams, body InsertRecordWithIDJSONRequestBody, reqEditors ...RequestEditorFn) (*InsertRecordWithIDResponse, error) {
	rsp, err := c.InsertRecordWithID(ctx, dbBranchName, tableName, recordId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInsertRecordWithIDResponse(rsp)
}

// QueryTableWithBodyWithResponse request with arbitrary body returning *QueryTableResponse
func (c *ClientWithResponses) QueryTableWithBodyWithResponse(ctx context.Context, dbBranchName DBBranchNameParam, tableName TableNameParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*QueryTableResponse, error) {
	rsp, err := c.QueryTableWithBody(ctx, dbBranchName, tableName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseQueryTableResponse(rsp)
}

func (c *ClientWithResponses) QueryTableWithResponse(ctx context.Context, dbBranchName DBBranchNameParam, tableName TableNameParam, body QueryTableJSONRequestBody, reqEditors ...RequestEditorFn) (*QueryTableResponse, error) {
	rsp, err := c.QueryTable(ctx, dbBranchName, tableName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseQueryTableResponse(rsp)
}

// GetTableSchemaWithResponse request returning *GetTableSchemaResponse
func (c *ClientWithResponses) GetTableSchemaWithResponse(ctx context.Context, dbBranchName DBBranchNameParam, tableName TableNameParam, reqEditors ...RequestEditorFn) (*GetTableSchemaResponse, error) {
	rsp, err := c.GetTableSchema(ctx, dbBranchName, tableName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTableSchemaResponse(rsp)
}

// SetTableSchemaWithBodyWithResponse request with arbitrary body returning *SetTableSchemaResponse
func (c *ClientWithResponses) SetTableSchemaWithBodyWithResponse(ctx context.Context, dbBranchName DBBranchNameParam, tableName TableNameParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SetTableSchemaResponse, error) {
	rsp, err := c.SetTableSchemaWithBody(ctx, dbBranchName, tableName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSetTableSchemaResponse(rsp)
}

func (c *ClientWithResponses) SetTableSchemaWithResponse(ctx context.Context, dbBranchName DBBranchNameParam, tableName TableNameParam, body SetTableSchemaJSONRequestBody, reqEditors ...RequestEditorFn) (*SetTableSchemaResponse, error) {
	rsp, err := c.SetTableSchema(ctx, dbBranchName, tableName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSetTableSchemaResponse(rsp)
}

// GetDatabaseListWithResponse request returning *GetDatabaseListResponse
func (c *ClientWithResponses) GetDatabaseListWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetDatabaseListResponse, error) {
	rsp, err := c.GetDatabaseList(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDatabaseListResponse(rsp)
}

// DeleteDatabaseWithResponse request returning *DeleteDatabaseResponse
func (c *ClientWithResponses) DeleteDatabaseWithResponse(ctx context.Context, dbName DBNameParam, reqEditors ...RequestEditorFn) (*DeleteDatabaseResponse, error) {
	rsp, err := c.DeleteDatabase(ctx, dbName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteDatabaseResponse(rsp)
}

// GetBranchListWithResponse request returning *GetBranchListResponse
func (c *ClientWithResponses) GetBranchListWithResponse(ctx context.Context, dbName DBNameParam, reqEditors ...RequestEditorFn) (*GetBranchListResponse, error) {
	rsp, err := c.GetBranchList(ctx, dbName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetBranchListResponse(rsp)
}

// CreateDatabaseWithBodyWithResponse request with arbitrary body returning *CreateDatabaseResponse
func (c *ClientWithResponses) CreateDatabaseWithBodyWithResponse(ctx context.Context, dbName DBNameParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateDatabaseResponse, error) {
	rsp, err := c.CreateDatabaseWithBody(ctx, dbName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateDatabaseResponse(rsp)
}

func (c *ClientWithResponses) CreateDatabaseWithResponse(ctx context.Context, dbName DBNameParam, body CreateDatabaseJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateDatabaseResponse, error) {
	rsp, err := c.CreateDatabase(ctx, dbName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateDatabaseResponse(rsp)
}

// DeleteUserWithResponse request returning *DeleteUserResponse
func (c *ClientWithResponses) DeleteUserWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*DeleteUserResponse, error) {
	rsp, err := c.DeleteUser(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteUserResponse(rsp)
}

// GetUserWithResponse request returning *GetUserResponse
func (c *ClientWithResponses) GetUserWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetUserResponse, error) {
	rsp, err := c.GetUser(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserResponse(rsp)
}

// UpdateUserWithBodyWithResponse request with arbitrary body returning *UpdateUserResponse
func (c *ClientWithResponses) UpdateUserWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateUserResponse, error) {
	rsp, err := c.UpdateUserWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateUserResponse(rsp)
}

func (c *ClientWithResponses) UpdateUserWithResponse(ctx context.Context, body UpdateUserJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateUserResponse, error) {
	rsp, err := c.UpdateUser(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateUserResponse(rsp)
}

// GetUserAPIKeysWithResponse request returning *GetUserAPIKeysResponse
func (c *ClientWithResponses) GetUserAPIKeysWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetUserAPIKeysResponse, error) {
	rsp, err := c.GetUserAPIKeys(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserAPIKeysResponse(rsp)
}

// DeleteUserAPIKeyWithResponse request returning *DeleteUserAPIKeyResponse
func (c *ClientWithResponses) DeleteUserAPIKeyWithResponse(ctx context.Context, keyName APIKeyNameParam, reqEditors ...RequestEditorFn) (*DeleteUserAPIKeyResponse, error) {
	rsp, err := c.DeleteUserAPIKey(ctx, keyName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteUserAPIKeyResponse(rsp)
}

// CreateUserAPIKeyWithResponse request returning *CreateUserAPIKeyResponse
func (c *ClientWithResponses) CreateUserAPIKeyWithResponse(ctx context.Context, keyName APIKeyNameParam, reqEditors ...RequestEditorFn) (*CreateUserAPIKeyResponse, error) {
	rsp, err := c.CreateUserAPIKey(ctx, keyName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateUserAPIKeyResponse(rsp)
}

// GetWorkspacesListWithResponse request returning *GetWorkspacesListResponse
func (c *ClientWithResponses) GetWorkspacesListWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetWorkspacesListResponse, error) {
	rsp, err := c.GetWorkspacesList(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetWorkspacesListResponse(rsp)
}

// CreateWorkspaceWithBodyWithResponse request with arbitrary body returning *CreateWorkspaceResponse
func (c *ClientWithResponses) CreateWorkspaceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateWorkspaceResponse, error) {
	rsp, err := c.CreateWorkspaceWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateWorkspaceResponse(rsp)
}

func (c *ClientWithResponses) CreateWorkspaceWithResponse(ctx context.Context, body CreateWorkspaceJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateWorkspaceResponse, error) {
	rsp, err := c.CreateWorkspace(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateWorkspaceResponse(rsp)
}

// DeleteWorkspaceWithResponse request returning *DeleteWorkspaceResponse
func (c *ClientWithResponses) DeleteWorkspaceWithResponse(ctx context.Context, workspaceId WorkspaceIDParam, reqEditors ...RequestEditorFn) (*DeleteWorkspaceResponse, error) {
	rsp, err := c.DeleteWorkspace(ctx, workspaceId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteWorkspaceResponse(rsp)
}

// GetWorkspaceWithResponse request returning *GetWorkspaceResponse
func (c *ClientWithResponses) GetWorkspaceWithResponse(ctx context.Context, workspaceId WorkspaceIDParam, reqEditors ...RequestEditorFn) (*GetWorkspaceResponse, error) {
	rsp, err := c.GetWorkspace(ctx, workspaceId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetWorkspaceResponse(rsp)
}

// UpdateWorkspaceWithBodyWithResponse request with arbitrary body returning *UpdateWorkspaceResponse
func (c *ClientWithResponses) UpdateWorkspaceWithBodyWithResponse(ctx context.Context, workspaceId WorkspaceIDParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateWorkspaceResponse, error) {
	rsp, err := c.UpdateWorkspaceWithBody(ctx, workspaceId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateWorkspaceResponse(rsp)
}

func (c *ClientWithResponses) UpdateWorkspaceWithResponse(ctx context.Context, workspaceId WorkspaceIDParam, body UpdateWorkspaceJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateWorkspaceResponse, error) {
	rsp, err := c.UpdateWorkspace(ctx, workspaceId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateWorkspaceResponse(rsp)
}

// InviteWorkspaceMemberWithBodyWithResponse request with arbitrary body returning *InviteWorkspaceMemberResponse
func (c *ClientWithResponses) InviteWorkspaceMemberWithBodyWithResponse(ctx context.Context, workspaceId WorkspaceIDParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InviteWorkspaceMemberResponse, error) {
	rsp, err := c.InviteWorkspaceMemberWithBody(ctx, workspaceId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInviteWorkspaceMemberResponse(rsp)
}

func (c *ClientWithResponses) InviteWorkspaceMemberWithResponse(ctx context.Context, workspaceId WorkspaceIDParam, body InviteWorkspaceMemberJSONRequestBody, reqEditors ...RequestEditorFn) (*InviteWorkspaceMemberResponse, error) {
	rsp, err := c.InviteWorkspaceMember(ctx, workspaceId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInviteWorkspaceMemberResponse(rsp)
}

// CancelWorkspaceMemberInviteWithResponse request returning *CancelWorkspaceMemberInviteResponse
func (c *ClientWithResponses) CancelWorkspaceMemberInviteWithResponse(ctx context.Context, workspaceId WorkspaceIDParam, inviteId InviteIDParam, reqEditors ...RequestEditorFn) (*CancelWorkspaceMemberInviteResponse, error) {
	rsp, err := c.CancelWorkspaceMemberInvite(ctx, workspaceId, inviteId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCancelWorkspaceMemberInviteResponse(rsp)
}

// ResendWorkspaceMemberInviteWithResponse request returning *ResendWorkspaceMemberInviteResponse
func (c *ClientWithResponses) ResendWorkspaceMemberInviteWithResponse(ctx context.Context, workspaceId WorkspaceIDParam, inviteId InviteIDParam, reqEditors ...RequestEditorFn) (*ResendWorkspaceMemberInviteResponse, error) {
	rsp, err := c.ResendWorkspaceMemberInvite(ctx, workspaceId, inviteId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseResendWorkspaceMemberInviteResponse(rsp)
}

// AcceptWorkspaceMemberInviteWithResponse request returning *AcceptWorkspaceMemberInviteResponse
func (c *ClientWithResponses) AcceptWorkspaceMemberInviteWithResponse(ctx context.Context, workspaceId WorkspaceIDParam, inviteKey InviteKeyParam, reqEditors ...RequestEditorFn) (*AcceptWorkspaceMemberInviteResponse, error) {
	rsp, err := c.AcceptWorkspaceMemberInvite(ctx, workspaceId, inviteKey, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAcceptWorkspaceMemberInviteResponse(rsp)
}

// GetWorkspaceMembersListWithResponse request returning *GetWorkspaceMembersListResponse
func (c *ClientWithResponses) GetWorkspaceMembersListWithResponse(ctx context.Context, workspaceId WorkspaceIDParam, reqEditors ...RequestEditorFn) (*GetWorkspaceMembersListResponse, error) {
	rsp, err := c.GetWorkspaceMembersList(ctx, workspaceId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetWorkspaceMembersListResponse(rsp)
}

// RemoveWorkspaceMemberWithResponse request returning *RemoveWorkspaceMemberResponse
func (c *ClientWithResponses) RemoveWorkspaceMemberWithResponse(ctx context.Context, workspaceId WorkspaceIDParam, userId UserIDParam, reqEditors ...RequestEditorFn) (*RemoveWorkspaceMemberResponse, error) {
	rsp, err := c.RemoveWorkspaceMember(ctx, workspaceId, userId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRemoveWorkspaceMemberResponse(rsp)
}

// UpdateWorkspaceMemberRoleWithBodyWithResponse request with arbitrary body returning *UpdateWorkspaceMemberRoleResponse
func (c *ClientWithResponses) UpdateWorkspaceMemberRoleWithBodyWithResponse(ctx context.Context, workspaceId WorkspaceIDParam, userId UserIDParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateWorkspaceMemberRoleResponse, error) {
	rsp, err := c.UpdateWorkspaceMemberRoleWithBody(ctx, workspaceId, userId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateWorkspaceMemberRoleResponse(rsp)
}

func (c *ClientWithResponses) UpdateWorkspaceMemberRoleWithResponse(ctx context.Context, workspaceId WorkspaceIDParam, userId UserIDParam, body UpdateWorkspaceMemberRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateWorkspaceMemberRoleResponse, error) {
	rsp, err := c.UpdateWorkspaceMemberRole(ctx, workspaceId, userId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateWorkspaceMemberRoleResponse(rsp)
}

// ParseDeleteBranchResponse parses an HTTP response from a DeleteBranchWithResponse call
func ParseDeleteBranchResponse(rsp *http.Response) (*DeleteBranchResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteBranchResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Id      *string `json:"id,omitempty"`
			Message string  `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Id      *string `json:"id,omitempty"`
			Message string  `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Id      *string `json:"id,omitempty"`
			Message string  `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetBranchDetailsResponse parses an HTTP response from a GetBranchDetailsWithResponse call
func ParseGetBranchDetailsResponse(rsp *http.Response) (*GetBranchDetailsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetBranchDetailsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DBBranch
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Id      *string `json:"id,omitempty"`
			Message string  `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Id      *string `json:"id,omitempty"`
			Message string  `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Id      *string `json:"id,omitempty"`
			Message string  `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseCreateBranchResponse parses an HTTP response from a CreateBranchWithResponse call
func ParseCreateBranchResponse(rsp *http.Response) (*CreateBranchResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateBranchResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Id      *string `json:"id,omitempty"`
			Message string  `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Id      *string `json:"id,omitempty"`
			Message string  `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Id      *string `json:"id,omitempty"`
			Message string  `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetBranchMetadataResponse parses an HTTP response from a GetBranchMetadataWithResponse call
func ParseGetBranchMetadataResponse(rsp *http.Response) (*GetBranchMetadataResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetBranchMetadataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BranchMetadata
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Id      *string `json:"id,omitempty"`
			Message string  `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Id      *string `json:"id,omitempty"`
			Message string  `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Id      *string `json:"id,omitempty"`
			Message string  `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseUpdateBranchMetadataResponse parses an HTTP response from a UpdateBranchMetadataWithResponse call
func ParseUpdateBranchMetadataResponse(rsp *http.Response) (*UpdateBranchMetadataResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateBranchMetadataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Id      *string `json:"id,omitempty"`
			Message string  `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Id      *string `json:"id,omitempty"`
			Message string  `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Id      *string `json:"id,omitempty"`
			Message string  `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetBranchMigrationHistoryResponse parses an HTTP response from a GetBranchMigrationHistoryWithResponse call
func ParseGetBranchMigrationHistoryResponse(rsp *http.Response) (*GetBranchMigrationHistoryResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetBranchMigrationHistoryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Migrations  *[]BranchMigration   `json:"migrations,omitempty"`
			StartedFrom *StartedFromMetadata `json:"startedFrom,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Id      *string `json:"id,omitempty"`
			Message string  `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Id      *string `json:"id,omitempty"`
			Message string  `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Id      *string `json:"id,omitempty"`
			Message string  `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseExecuteBranchMigrationPlanResponse parses an HTTP response from a ExecuteBranchMigrationPlanWithResponse call
func ParseExecuteBranchMigrationPlanResponse(rsp *http.Response) (*ExecuteBranchMigrationPlanResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ExecuteBranchMigrationPlanResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Id      *string `json:"id,omitempty"`
			Message string  `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Id      *string `json:"id,omitempty"`
			Message string  `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Id      *string `json:"id,omitempty"`
			Message string  `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetBranchMigrationPlanResponse parses an HTTP response from a GetBranchMigrationPlanWithResponse call
func ParseGetBranchMigrationPlanResponse(rsp *http.Response) (*GetBranchMigrationPlanResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetBranchMigrationPlanResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Migration BranchMigration `json:"migration"`
			Version   int             `json:"version"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Id      *string `json:"id,omitempty"`
			Message string  `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Id      *string `json:"id,omitempty"`
			Message string  `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Id      *string `json:"id,omitempty"`
			Message string  `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseSearchBranchResponse parses an HTTP response from a SearchBranchWithResponse call
func ParseSearchBranchResponse(rsp *http.Response) (*SearchBranchResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SearchBranchResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Records []Record `json:"records"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Id      *string `json:"id,omitempty"`
			Message string  `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Id      *string `json:"id,omitempty"`
			Message string  `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Id      *string `json:"id,omitempty"`
			Message string  `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetBranchStatsResponse parses an HTTP response from a GetBranchStatsWithResponse call
func ParseGetBranchStatsResponse(rsp *http.Response) (*GetBranchStatsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetBranchStatsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Interval        string              `json:"interval"`
			NumberOfRecords *[]MetricsDatapoint `json:"numberOfRecords,omitempty"`
			ReadLatency     *MetricsLatency     `json:"readLatency,omitempty"`
			ReadsOverTime   *[]MetricsDatapoint `json:"readsOverTime,omitempty"`
			Resolution      string              `json:"resolution"`
			Timestamp       string              `json:"timestamp"`
			Warning         *string             `json:"warning,omitempty"`
			WriteLatency    *MetricsLatency     `json:"writeLatency,omitempty"`
			WritesOverTime  *[]MetricsDatapoint `json:"writesOverTime,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Id      *string `json:"id,omitempty"`
			Message string  `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Id      *string `json:"id,omitempty"`
			Message string  `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Id      *string `json:"id,omitempty"`
			Message string  `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseDeleteTableResponse parses an HTTP response from a DeleteTableWithResponse call
func ParseDeleteTableResponse(rsp *http.Response) (*DeleteTableResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteTableResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Id      *string `json:"id,omitempty"`
			Message string  `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Id      *string `json:"id,omitempty"`
			Message string  `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseUpdateTableResponse parses an HTTP response from a UpdateTableWithResponse call
func ParseUpdateTableResponse(rsp *http.Response) (*UpdateTableResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateTableResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Id      *string `json:"id,omitempty"`
			Message string  `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Id      *string `json:"id,omitempty"`
			Message string  `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Id      *string `json:"id,omitempty"`
			Message string  `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseCreateTableResponse parses an HTTP response from a CreateTableWithResponse call
func ParseCreateTableResponse(rsp *http.Response) (*CreateTableResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateTableResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Id      *string `json:"id,omitempty"`
			Message string  `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Id      *string `json:"id,omitempty"`
			Message string  `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Id      *string `json:"id,omitempty"`
			Message string  `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest struct {
			Id      *string `json:"id,omitempty"`
			Message string  `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseBulkInsertTableRecordsResponse parses an HTTP response from a BulkInsertTableRecordsWithResponse call
func ParseBulkInsertTableRecordsResponse(rsp *http.Response) (*BulkInsertTableRecordsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BulkInsertTableRecordsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			RecordIDs []string `json:"recordIDs"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Errors []struct {
				Message *string `json:"message,omitempty"`
			} `json:"errors"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Id      *string `json:"id,omitempty"`
			Message string  `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Id      *string `json:"id,omitempty"`
			Message string  `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetTableColumnsResponse parses an HTTP response from a GetTableColumnsWithResponse call
func ParseGetTableColumnsResponse(rsp *http.Response) (*GetTableColumnsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTableColumnsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Columns []Column `json:"columns"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Id      *string `json:"id,omitempty"`
			Message string  `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Id      *string `json:"id,omitempty"`
			Message string  `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Id      *string `json:"id,omitempty"`
			Message string  `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseAddTableColumnResponse parses an HTTP response from a AddTableColumnWithResponse call
func ParseAddTableColumnResponse(rsp *http.Response) (*AddTableColumnResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AddTableColumnResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			MigrationID string `json:"migrationID"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Id      *string `json:"id,omitempty"`
			Message string  `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Id      *string `json:"id,omitempty"`
			Message string  `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Id      *string `json:"id,omitempty"`
			Message string  `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseDeleteColumnResponse parses an HTTP response from a DeleteColumnWithResponse call
func ParseDeleteColumnResponse(rsp *http.Response) (*DeleteColumnResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteColumnResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			MigrationID string `json:"migrationID"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Id      *string `json:"id,omitempty"`
			Message string  `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Id      *string `json:"id,omitempty"`
			Message string  `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Id      *string `json:"id,omitempty"`
			Message string  `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetColumnResponse parses an HTTP response from a GetColumnWithResponse call
func ParseGetColumnResponse(rsp *http.Response) (*GetColumnResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetColumnResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Column
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Id      *string `json:"id,omitempty"`
			Message string  `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Id      *string `json:"id,omitempty"`
			Message string  `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Id      *string `json:"id,omitempty"`
			Message string  `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseUpdateColumnResponse parses an HTTP response from a UpdateColumnWithResponse call
func ParseUpdateColumnResponse(rsp *http.Response) (*UpdateColumnResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateColumnResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			MigrationID string `json:"migrationID"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Id      *string `json:"id,omitempty"`
			Message string  `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Id      *string `json:"id,omitempty"`
			Message string  `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Id      *string `json:"id,omitempty"`
			Message string  `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseInsertRecordResponse parses an HTTP response from a InsertRecordWithResponse call
func ParseInsertRecordResponse(rsp *http.Response) (*InsertRecordResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InsertRecordResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Id   string `json:"id"`
			Xata struct {
				Version int `json:"version"`
			} `json:"xata"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Id      *string `json:"id,omitempty"`
			Message string  `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Id      *string `json:"id,omitempty"`
			Message string  `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Id      *string `json:"id,omitempty"`
			Message string  `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseDeleteRecordResponse parses an HTTP response from a DeleteRecordWithResponse call
func ParseDeleteRecordResponse(rsp *http.Response) (*DeleteRecordResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteRecordResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Id      *string `json:"id,omitempty"`
			Message string  `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Id      *string `json:"id,omitempty"`
			Message string  `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Id      *string `json:"id,omitempty"`
			Message string  `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetRecordResponse parses an HTTP response from a GetRecordWithResponse call
func ParseGetRecordResponse(rsp *http.Response) (*GetRecordResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRecordResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Record
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Id      *string `json:"id,omitempty"`
			Message string  `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Id      *string `json:"id,omitempty"`
			Message string  `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Id      *string `json:"id,omitempty"`
			Message string  `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseUpdateRecordWithIDResponse parses an HTTP response from a UpdateRecordWithIDWithResponse call
func ParseUpdateRecordWithIDResponse(rsp *http.Response) (*UpdateRecordWithIDResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateRecordWithIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Id   string `json:"id"`
			Xata struct {
				Version int `json:"version"`
			} `json:"xata"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Id      *string `json:"id,omitempty"`
			Message string  `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Id      *string `json:"id,omitempty"`
			Message string  `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Id      *string `json:"id,omitempty"`
			Message string  `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest struct {
			Id      *string `json:"id,omitempty"`
			Message string  `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseUpsertRecordWithIDResponse parses an HTTP response from a UpsertRecordWithIDWithResponse call
func ParseUpsertRecordWithIDResponse(rsp *http.Response) (*UpsertRecordWithIDResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpsertRecordWithIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Id   string `json:"id"`
			Xata struct {
				Version int `json:"version"`
			} `json:"xata"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Id      *string `json:"id,omitempty"`
			Message string  `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Id      *string `json:"id,omitempty"`
			Message string  `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Id      *string `json:"id,omitempty"`
			Message string  `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest struct {
			Id      *string `json:"id,omitempty"`
			Message string  `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseInsertRecordWithIDResponse parses an HTTP response from a InsertRecordWithIDWithResponse call
func ParseInsertRecordWithIDResponse(rsp *http.Response) (*InsertRecordWithIDResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InsertRecordWithIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Id   string `json:"id"`
			Xata struct {
				Version int `json:"version"`
			} `json:"xata"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Id      *string `json:"id,omitempty"`
			Message string  `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Id      *string `json:"id,omitempty"`
			Message string  `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Id      *string `json:"id,omitempty"`
			Message string  `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest struct {
			Id      *string `json:"id,omitempty"`
			Message string  `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseQueryTableResponse parses an HTTP response from a QueryTableWithResponse call
func ParseQueryTableResponse(rsp *http.Response) (*QueryTableResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &QueryTableResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Records metadata
			Meta    RecordsMetadata `json:"meta"`
			Records []Record        `json:"records"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Id      *string `json:"id,omitempty"`
			Message string  `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Id      *string `json:"id,omitempty"`
			Message string  `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Id      *string `json:"id,omitempty"`
			Message string  `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetTableSchemaResponse parses an HTTP response from a GetTableSchemaWithResponse call
func ParseGetTableSchemaResponse(rsp *http.Response) (*GetTableSchemaResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTableSchemaResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Columns []Column `json:"columns"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Id      *string `json:"id,omitempty"`
			Message string  `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Id      *string `json:"id,omitempty"`
			Message string  `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Id      *string `json:"id,omitempty"`
			Message string  `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseSetTableSchemaResponse parses an HTTP response from a SetTableSchemaWithResponse call
func ParseSetTableSchemaResponse(rsp *http.Response) (*SetTableSchemaResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SetTableSchemaResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Id      *string `json:"id,omitempty"`
			Message string  `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Id      *string `json:"id,omitempty"`
			Message string  `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Id      *string `json:"id,omitempty"`
			Message string  `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest struct {
			Id      *string `json:"id,omitempty"`
			Message string  `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseGetDatabaseListResponse parses an HTTP response from a GetDatabaseListWithResponse call
func ParseGetDatabaseListResponse(rsp *http.Response) (*GetDatabaseListResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDatabaseListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListDatabasesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Id      *string `json:"id,omitempty"`
			Message string  `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Id      *string `json:"id,omitempty"`
			Message string  `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseDeleteDatabaseResponse parses an HTTP response from a DeleteDatabaseWithResponse call
func ParseDeleteDatabaseResponse(rsp *http.Response) (*DeleteDatabaseResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteDatabaseResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Id      *string `json:"id,omitempty"`
			Message string  `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Id      *string `json:"id,omitempty"`
			Message string  `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Id      *string `json:"id,omitempty"`
			Message string  `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetBranchListResponse parses an HTTP response from a GetBranchListWithResponse call
func ParseGetBranchListResponse(rsp *http.Response) (*GetBranchListResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetBranchListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListBranchesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Id      *string `json:"id,omitempty"`
			Message string  `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Id      *string `json:"id,omitempty"`
			Message string  `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Id      *string `json:"id,omitempty"`
			Message string  `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseCreateDatabaseResponse parses an HTTP response from a CreateDatabaseWithResponse call
func ParseCreateDatabaseResponse(rsp *http.Response) (*CreateDatabaseResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateDatabaseResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			BranchName   *string `json:"branchName,omitempty"`
			DatabaseName string  `json:"databaseName"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Id      *string `json:"id,omitempty"`
			Message string  `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Id      *string `json:"id,omitempty"`
			Message string  `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseDeleteUserResponse parses an HTTP response from a DeleteUserWithResponse call
func ParseDeleteUserResponse(rsp *http.Response) (*DeleteUserResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Id      *string `json:"id,omitempty"`
			Message string  `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Id      *string `json:"id,omitempty"`
			Message string  `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Id      *string `json:"id,omitempty"`
			Message string  `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetUserResponse parses an HTTP response from a GetUserWithResponse call
func ParseGetUserResponse(rsp *http.Response) (*GetUserResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserWithID
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Id      *string `json:"id,omitempty"`
			Message string  `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Id      *string `json:"id,omitempty"`
			Message string  `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Id      *string `json:"id,omitempty"`
			Message string  `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseUpdateUserResponse parses an HTTP response from a UpdateUserWithResponse call
func ParseUpdateUserResponse(rsp *http.Response) (*UpdateUserResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserWithID
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Id      *string `json:"id,omitempty"`
			Message string  `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Id      *string `json:"id,omitempty"`
			Message string  `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Id      *string `json:"id,omitempty"`
			Message string  `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetUserAPIKeysResponse parses an HTTP response from a GetUserAPIKeysWithResponse call
func ParseGetUserAPIKeysResponse(rsp *http.Response) (*GetUserAPIKeysResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserAPIKeysResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Keys []struct {
				CreatedAt DateTime `json:"createdAt"`
				Name      string   `json:"name"`
			} `json:"keys"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Id      *string `json:"id,omitempty"`
			Message string  `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Id      *string `json:"id,omitempty"`
			Message string  `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Id      *string `json:"id,omitempty"`
			Message string  `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseDeleteUserAPIKeyResponse parses an HTTP response from a DeleteUserAPIKeyWithResponse call
func ParseDeleteUserAPIKeyResponse(rsp *http.Response) (*DeleteUserAPIKeyResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteUserAPIKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Id      *string `json:"id,omitempty"`
			Message string  `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Id      *string `json:"id,omitempty"`
			Message string  `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Id      *string `json:"id,omitempty"`
			Message string  `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseCreateUserAPIKeyResponse parses an HTTP response from a CreateUserAPIKeyWithResponse call
func ParseCreateUserAPIKeyResponse(rsp *http.Response) (*CreateUserAPIKeyResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateUserAPIKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			CreatedAt DateTime `json:"createdAt"`
			Key       string   `json:"key"`
			Name      string   `json:"name"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Id      *string `json:"id,omitempty"`
			Message string  `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Id      *string `json:"id,omitempty"`
			Message string  `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Id      *string `json:"id,omitempty"`
			Message string  `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetWorkspacesListResponse parses an HTTP response from a GetWorkspacesListWithResponse call
func ParseGetWorkspacesListResponse(rsp *http.Response) (*GetWorkspacesListResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetWorkspacesListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Workspaces []struct {
				Id   WorkspaceID `json:"id"`
				Name string      `json:"name"`
				Role Role        `json:"role"`
				Slug string      `json:"slug"`
			} `json:"workspaces"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Id      *string `json:"id,omitempty"`
			Message string  `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Id      *string `json:"id,omitempty"`
			Message string  `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Id      *string `json:"id,omitempty"`
			Message string  `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseCreateWorkspaceResponse parses an HTTP response from a CreateWorkspaceWithResponse call
func ParseCreateWorkspaceResponse(rsp *http.Response) (*CreateWorkspaceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateWorkspaceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Workspace
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Id      *string `json:"id,omitempty"`
			Message string  `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Id      *string `json:"id,omitempty"`
			Message string  `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Id      *string `json:"id,omitempty"`
			Message string  `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseDeleteWorkspaceResponse parses an HTTP response from a DeleteWorkspaceWithResponse call
func ParseDeleteWorkspaceResponse(rsp *http.Response) (*DeleteWorkspaceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteWorkspaceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Id      *string `json:"id,omitempty"`
			Message string  `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Id      *string `json:"id,omitempty"`
			Message string  `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Id      *string `json:"id,omitempty"`
			Message string  `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetWorkspaceResponse parses an HTTP response from a GetWorkspaceWithResponse call
func ParseGetWorkspaceResponse(rsp *http.Response) (*GetWorkspaceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetWorkspaceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Workspace
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Id      *string `json:"id,omitempty"`
			Message string  `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Id      *string `json:"id,omitempty"`
			Message string  `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Id      *string `json:"id,omitempty"`
			Message string  `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseUpdateWorkspaceResponse parses an HTTP response from a UpdateWorkspaceWithResponse call
func ParseUpdateWorkspaceResponse(rsp *http.Response) (*UpdateWorkspaceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateWorkspaceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Workspace
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Id      *string `json:"id,omitempty"`
			Message string  `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Id      *string `json:"id,omitempty"`
			Message string  `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Id      *string `json:"id,omitempty"`
			Message string  `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseInviteWorkspaceMemberResponse parses an HTTP response from a InviteWorkspaceMemberWithResponse call
func ParseInviteWorkspaceMemberResponse(rsp *http.Response) (*InviteWorkspaceMemberResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InviteWorkspaceMemberResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WorkspaceInvite
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Id      *string `json:"id,omitempty"`
			Message string  `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Id      *string `json:"id,omitempty"`
			Message string  `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Id      *string `json:"id,omitempty"`
			Message string  `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseCancelWorkspaceMemberInviteResponse parses an HTTP response from a CancelWorkspaceMemberInviteWithResponse call
func ParseCancelWorkspaceMemberInviteResponse(rsp *http.Response) (*CancelWorkspaceMemberInviteResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CancelWorkspaceMemberInviteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Id      *string `json:"id,omitempty"`
			Message string  `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Id      *string `json:"id,omitempty"`
			Message string  `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Id      *string `json:"id,omitempty"`
			Message string  `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseResendWorkspaceMemberInviteResponse parses an HTTP response from a ResendWorkspaceMemberInviteWithResponse call
func ParseResendWorkspaceMemberInviteResponse(rsp *http.Response) (*ResendWorkspaceMemberInviteResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ResendWorkspaceMemberInviteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Id      *string `json:"id,omitempty"`
			Message string  `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Id      *string `json:"id,omitempty"`
			Message string  `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Id      *string `json:"id,omitempty"`
			Message string  `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseAcceptWorkspaceMemberInviteResponse parses an HTTP response from a AcceptWorkspaceMemberInviteWithResponse call
func ParseAcceptWorkspaceMemberInviteResponse(rsp *http.Response) (*AcceptWorkspaceMemberInviteResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AcceptWorkspaceMemberInviteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Id      *string `json:"id,omitempty"`
			Message string  `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Id      *string `json:"id,omitempty"`
			Message string  `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Id      *string `json:"id,omitempty"`
			Message string  `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetWorkspaceMembersListResponse parses an HTTP response from a GetWorkspaceMembersListWithResponse call
func ParseGetWorkspaceMembersListResponse(rsp *http.Response) (*GetWorkspaceMembersListResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetWorkspaceMembersListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WorkspaceMembers
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Id      *string `json:"id,omitempty"`
			Message string  `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Id      *string `json:"id,omitempty"`
			Message string  `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Id      *string `json:"id,omitempty"`
			Message string  `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseRemoveWorkspaceMemberResponse parses an HTTP response from a RemoveWorkspaceMemberWithResponse call
func ParseRemoveWorkspaceMemberResponse(rsp *http.Response) (*RemoveWorkspaceMemberResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RemoveWorkspaceMemberResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Id      *string `json:"id,omitempty"`
			Message string  `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Id      *string `json:"id,omitempty"`
			Message string  `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Id      *string `json:"id,omitempty"`
			Message string  `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseUpdateWorkspaceMemberRoleResponse parses an HTTP response from a UpdateWorkspaceMemberRoleWithResponse call
func ParseUpdateWorkspaceMemberRoleResponse(rsp *http.Response) (*UpdateWorkspaceMemberRoleResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateWorkspaceMemberRoleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Id      *string `json:"id,omitempty"`
			Message string  `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Id      *string `json:"id,omitempty"`
			Message string  `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Id      *string `json:"id,omitempty"`
			Message string  `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}
